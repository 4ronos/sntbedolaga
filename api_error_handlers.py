import logging
from typing import Optional, Dict, Any, Callable
from aiogram.types import CallbackQuery
from aiogram import Router
from remnawave_api import RemnaWaveAPI
from translations import t

logger = logging.getLogger(__name__)

class APIErrorHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    
    @staticmethod
    async def handle_api_error(callback: CallbackQuery, error: Exception, 
                             operation: str, user_language: str = 'ru',
                             fallback_keyboard=None) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å
        """
        error_message = str(error).lower()
        
        if "timeout" in error_message or "connection" in error_message:
            text = "‚è± –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API\n\n"
            text += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            text += "‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n"
            text += "‚Ä¢ –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ RemnaWave\n"
            text += "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n\n"
            text += "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
            
        elif "401" in error_message or "unauthorized" in error_message:
            text = "üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API\n\n"
            text += "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫.\n"
            text += "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."
            
        elif "404" in error_message or "not found" in error_message:
            text = f"‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            text += f"–û–ø–µ—Ä–∞—Ü–∏—è: {operation}\n"
            text += "–í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            
        elif "500" in error_message or "internal server error" in error_message:
            text = "üî• –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ RemnaWave\n\n"
            text += "–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ."
            
        else:
            text = f"‚ùå –û—à–∏–±–∫–∞ API –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation}\n\n"
            text += f"–î–µ—Ç–∞–ª–∏: {str(error)[:100]}{'...' if len(str(error)) > 100 else ''}\n\n"
            text += "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è."
        
        try:
            await callback.message.edit_text(
                text,
                reply_markup=fallback_keyboard or error_recovery_keyboard(operation, user_language)
            )
            return True
        except Exception as edit_error:
            logger.error(f"Failed to edit message with error info: {edit_error}")
            try:
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {operation}", show_alert=True)
                return True
            except:
                return False

    @staticmethod
    async def safe_api_call(api_method: Callable, *args, **kwargs) -> tuple[bool, Any]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        
        Returns:
            tuple: (success: bool, result: Any)
        """
        try:
            result = await api_method(*args, **kwargs)
            return True, result
        except Exception as e:
            logger.error(f"API call failed: {api_method.__name__} - {e}")
            return False, str(e)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
def create_error_recovery_keyboard(error_context: str, language: str = 'ru'):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏"""
    from keyboards import error_recovery_keyboard
    return error_recovery_keyboard(error_context, language)

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RemnaWave API
async def safe_get_nodes(api: RemnaWaveAPI) -> tuple[bool, list]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–¥"""
    try:
        logger.info("Attempting to fetch nodes from API...")
        nodes = await api.get_all_nodes()
        
        if nodes is None:
            logger.warning("API returned None for nodes")
            return False, []
        
        if not isinstance(nodes, list):
            logger.warning(f"API returned non-list for nodes: {type(nodes)}")
            return False, []
        
        logger.info(f"Successfully fetched {len(nodes)} nodes")
        return True, nodes
        
    except Exception as e:
        logger.error(f"Error fetching nodes: {e}")
        return False, []

async def safe_get_system_users(api: RemnaWaveAPI) -> tuple[bool, list]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.info("Attempting to fetch system users from API...")
        users = await api.get_all_system_users_full()
        
        if users is None:
            logger.warning("API returned None for users")
            return False, []
        
        if not isinstance(users, list):
            logger.warning(f"API returned non-list for users: {type(users)}")
            return False, []
        
        logger.info(f"Successfully fetched {len(users)} users")
        return True, users
        
    except Exception as e:
        logger.error(f"Error fetching system users: {e}")
        return False, []

async def safe_restart_nodes(api: RemnaWaveAPI, all_nodes: bool = True, node_id: str = None) -> tuple[bool, str]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–¥"""
    try:
        if all_nodes:
            logger.info("Attempting to restart all nodes...")
            result = await api.restart_all_nodes()
        else:
            logger.info(f"Attempting to restart node {node_id}...")
            result = await api.restart_node(node_id)
        
        if result:
            message = "–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            logger.info(f"Restart command sent successfully")
            return True, message
        else:
            message = "API –≤–µ—Ä–Ω—É–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            logger.warning("API returned negative result for restart")
            return False, message
            
    except Exception as e:
        logger.error(f"Error restarting nodes: {e}")
        return False, str(e)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è API
async def check_api_health(api: RemnaWaveAPI) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    health_info = {
        'api_available': False,
        'nodes_accessible': False,
        'users_accessible': False,
        'system_stats_accessible': False,
        'errors': []
    }
    
    if api is None:
        health_info['errors'].append("API instance is None")
        return health_info
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–¥ (–æ–±—ã—á–Ω–æ –±—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
        success, nodes = await safe_get_nodes(api)
        if success:
            health_info['api_available'] = True
            health_info['nodes_accessible'] = True
        else:
            health_info['errors'].append("Cannot fetch nodes")
    except Exception as e:
        health_info['errors'].append(f"Nodes check failed: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        success, users = await safe_get_system_users(api)
        if success:
            health_info['users_accessible'] = True
        else:
            health_info['errors'].append("Cannot fetch users")
    except Exception as e:
        health_info['errors'].append(f"Users check failed: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        stats = await api.get_system_stats()
        if stats:
            health_info['system_stats_accessible'] = True
        else:
            health_info['errors'].append("Cannot fetch system stats")
    except Exception as e:
        health_info['errors'].append(f"System stats check failed: {e}")
    
    return health_info

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
def handle_api_errors(operation_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API –≤ handler'–∞—Ö"""
    def decorator(func):
        async def wrapper(callback: CallbackQuery, user, *args, **kwargs):
            try:
                return await func(callback, user, *args, **kwargs)
            except Exception as e:
                logger.error(f"Error in {func.__name__}: {e}")
                
                # –ü–æ–ª—É—á–∞–µ–º API –∏–∑ kwargs –µ—Å–ª–∏ –µ—Å—Ç—å
                api = kwargs.get('api')
                fallback_keyboard = None
                
                # –°–æ–∑–¥–∞–µ–º fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
                if 'nodes' in operation_name.lower():
                    from keyboards import admin_system_keyboard
                    fallback_keyboard = admin_system_keyboard(user.language)
                elif 'users' in operation_name.lower():
                    from keyboards import system_users_keyboard
                    fallback_keyboard = system_users_keyboard(user.language)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                await APIErrorHandler.handle_api_error(
                    callback, e, operation_name, user.language, fallback_keyboard
                )
        
        return wrapper
    return decorator
