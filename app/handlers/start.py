import logging
from aiogram import Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.states import RegistrationStates
from app.database.crud.user import (
    get_user_by_telegram_id, create_user, get_user_by_referral_code
)
from app.keyboards.inline import (
    get_rules_keyboard, get_main_menu_keyboard
)
from app.localization.texts import get_texts
from app.services.referral_service import process_referral_registration
from app.utils.user_utils import generate_unique_referral_code

logger = logging.getLogger(__name__)


async def cmd_start(message: types.Message, state: FSMContext, db: AsyncSession):
    logger.info(f"üöÄ START: –û–±—Ä–∞–±–æ—Ç–∫–∞ /start –æ—Ç {message.from_user.id}")
    
    referral_code = None
    if len(message.text.split()) > 1:
        potential_code = message.text.split()[1]
        referral_code = potential_code
        logger.info(f"üîé –ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {referral_code}")
    
    if referral_code:
        await state.set_data({'referral_code': referral_code})
    
    user = await get_user_by_telegram_id(db, message.from_user.id)
    
    if user:
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.telegram_id}")
        texts = get_texts(user.language)
        
        if referral_code and not user.referred_by_id:
            await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.")
        
        has_active_subscription = user.subscription is not None
        subscription_is_active = False
        
        if user.subscription:
            subscription_is_active = user.subscription.is_active
        
        await message.answer(
            texts.MAIN_MENU.format(
                user_name=user.full_name,
                balance=texts.format_price(user.balance_kopeks),
                subscription_status=_get_subscription_status(user, texts)
            ),
            reply_markup=get_main_menu_keyboard(
                language=user.language,
                is_admin=settings.is_admin(user.telegram_id),
                has_had_paid_subscription=user.has_had_paid_subscription,
                has_active_subscription=has_active_subscription,
                subscription_is_active=subscription_is_active
            )
        )
    else:
        logger.info(f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        
        language = 'ru'
        texts = get_texts(language)
        
        data = await state.get_data() or {}
        data['language'] = language
        await state.set_data(data)
        logger.info(f"üíæ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        await message.answer(
            texts.RULES_TEXT,
            reply_markup=get_rules_keyboard(language)
        )
        logger.info(f"üìã –ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        
        await state.set_state(RegistrationStates.waiting_for_rules_accept)
        current_state = await state.get_state()
        logger.info(f"üìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")


async def process_rules_accept(
    callback: types.CallbackQuery, 
    state: FSMContext, 
    db: AsyncSession
):
    
    logger.info(f"üìã RULES: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª")
    logger.info(f"üìä Callback data: {callback.data}")
    logger.info(f"üë§ User: {callback.from_user.id}")
    
    current_state = await state.get_state()
    logger.info(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    try:
        await callback.answer()
        
        data = await state.get_data()
        language = data.get('language', 'ru')
        texts = get_texts(language)
        
        if callback.data == 'rules_accept':
            logger.info(f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
            
            try:
                await callback.message.delete()
                logger.info(f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —É–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: {e}")
                try:
                    await callback.message.edit_text(
                        "‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç—ã! –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...",
                        reply_markup=None
                    )
                except:
                    pass
            
            if data.get('referral_code'):
                logger.info(f"üé´ –ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ deep link: {data['referral_code']}")
                
                referrer = await get_user_by_referral_code(db, data['referral_code'])
                if referrer:
                    data['referrer_id'] = referrer.id
                    await state.set_data(data)
                    logger.info(f"‚úÖ –†–µ—Ñ–µ—Ä–µ–Ω—Å –Ω–∞–π–¥–µ–Ω: {referrer.id}")
                
                await complete_registration_from_callback(callback, state, db)
            else:
                try:
                    await callback.message.answer(
                        "–£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥? –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
                        reply_markup=get_referral_code_keyboard(language)
                    )
                    await state.set_state(RegistrationStates.waiting_for_referral_code)
                    logger.info(f"üîç –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –∫–æ–¥–µ: {e}")
                    await complete_registration_from_callback(callback, state, db)
                    
        else:
            logger.info(f"‚ùå –ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
            
            try:
                rules_required_text = getattr(texts, 'RULES_REQUIRED', 
                                             "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞.")
                await callback.message.edit_text(
                    rules_required_text,
                    reply_markup=get_rules_keyboard(language)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª: {e}")
                await callback.message.edit_text(
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞.",
                    reply_markup=get_rules_keyboard(language)
                )
        
        logger.info(f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        
        try:
            data = await state.get_data()
            language = data.get('language', 'ru')
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_rules_keyboard(language)
            )
            await state.set_state(RegistrationStates.waiting_for_rules_accept)
        except:
            pass


async def process_referral_code_input(
    message: types.Message, 
    state: FSMContext, 
    db: AsyncSession
):
    
    logger.info(f"üé´ REFERRAL: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: {message.text}")
    
    data = await state.get_data()
    language = data.get('language', 'ru')
    texts = get_texts(language)
    
    referral_code = message.text.strip()
    
    referrer = await get_user_by_referral_code(db, referral_code)
    if referrer:
        data['referrer_id'] = referrer.id
        await state.set_data(data)
        await message.answer("‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!")
        logger.info(f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥")
        logger.info(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥")
        return
    
    await complete_registration(message, state, db)


async def process_referral_code_skip(
    callback: types.CallbackQuery, 
    state: FSMContext, 
    db: AsyncSession
):
    
    logger.info(f"‚≠êÔ∏è SKIP: –ü—Ä–æ–ø—É—Å–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    await callback.answer()
    
    try:
        await callback.message.delete()
        logger.info(f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –∫–æ–¥–µ: {e}")
        try:
            await callback.message.edit_text(
                "‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...",
                reply_markup=None
            )
        except:
            pass
    
    await complete_registration_from_callback(callback, state, db)


async def complete_registration_from_callback(
    callback: types.CallbackQuery,
    state: FSMContext, 
    db: AsyncSession
):
    
    logger.info(f"üèÅ COMPLETE: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    existing_user = await get_user_by_telegram_id(db, callback.from_user.id)
    if existing_user:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        texts = get_texts(existing_user.language)
        
        has_active_subscription = existing_user.subscription is not None
        subscription_is_active = False
        
        if existing_user.subscription:
            subscription_is_active = existing_user.subscription.is_active
        
        user_name = existing_user.full_name
        balance_kopeks = existing_user.balance_kopeks
        
        try:
            await callback.message.answer(
                texts.MAIN_MENU.format(
                    user_name=user_name,
                    balance=texts.format_price(balance_kopeks),
                    subscription_status=_get_subscription_status(existing_user, texts)
                ),
                reply_markup=get_main_menu_keyboard(
                    language=existing_user.language,
                    is_admin=settings.is_admin(existing_user.telegram_id),
                    has_had_paid_subscription=existing_user.has_had_paid_subscription,
                    has_active_subscription=has_active_subscription,
                    subscription_is_active=subscription_is_active
                )
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            await callback.message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!")
        
        await state.clear()
        return
    
    data = await state.get_data()
    language = data.get('language', 'ru')
    texts = get_texts(language)
    
    referrer_id = data.get('referrer_id')
    if not referrer_id and data.get('referral_code'):
        referrer = await get_user_by_referral_code(db, data['referral_code'])
        if referrer:
            referrer_id = referrer.id
    
    referral_code = await generate_unique_referral_code(db, callback.from_user.id)
    
    user = await create_user(
        db=db,
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
        language=language,
        referred_by_id=referrer_id,
        referral_code=referral_code 
    )
    
    if referrer_id:
        try:
            await process_referral_registration(db, user.id, referrer_id)
            bonus_message = f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {settings.REFERRED_USER_REWARD/100}‚ÇΩ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
            await callback.message.answer(bonus_message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    await state.clear()
    
    has_active_subscription = False 
    subscription_is_active = False
    
    user_name = user.full_name
    balance_kopeks = user.balance_kopeks
    user_telegram_id = user.telegram_id
    user_language = user.language
    has_had_paid_subscription = user.has_had_paid_subscription
    
    try:
        await callback.message.answer(
            texts.MAIN_MENU.format(
                user_name=user_name,
                balance=texts.format_price(balance_kopeks),
                subscription_status=_get_subscription_status_simple(texts)
            ),
            reply_markup=get_main_menu_keyboard(
                language=user_language,
                is_admin=settings.is_admin(user_telegram_id),
                has_had_paid_subscription=has_had_paid_subscription,
                has_active_subscription=has_active_subscription,
                subscription_is_active=subscription_is_active
            )
        )
        logger.info(f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        try:
            balance_rubles = balance_kopeks / 100
            await callback.message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n"
                f"–ë–∞–ª–∞–Ω—Å: {balance_rubles} ‚ÇΩ\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
                reply_markup=get_main_menu_keyboard(
                    language=user_language,
                    is_admin=settings.is_admin(user_telegram_id),
                    has_had_paid_subscription=has_had_paid_subscription,
                    has_active_subscription=has_active_subscription,
                    subscription_is_active=subscription_is_active
                )
            )
            logger.info(f"‚úÖ Fallback –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
        except Exception as fallback_error:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ fallback –º–µ–Ω—é: {fallback_error}")
            try:
                await callback.message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            except Exception as final_error:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {final_error}")
    
    logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_telegram_id}")


async def complete_registration(
    message: types.Message, 
    state: FSMContext, 
    db: AsyncSession
):
    
    logger.info(f"üèÅ COMPLETE: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    data = await state.get_data()
    language = data.get('language', 'ru')
    texts = get_texts(language)
    
    referrer_id = data.get('referrer_id')
    if not referrer_id and data.get('referral_code'):
        referrer = await get_user_by_referral_code(db, data['referral_code'])
        if referrer:
            referrer_id = referrer.id
    
    referral_code = await generate_unique_referral_code(db, message.from_user.id)
    
    user = await create_user(
        db=db,
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        language=language,
        referred_by_id=referrer_id,
        referral_code=referral_code
    )
    
    if referrer_id:
        try:
            await process_referral_registration(db, user.id, referrer_id)
            bonus_message = f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {settings.REFERRED_USER_REWARD/100}‚ÇΩ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
            await message.answer(bonus_message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    await state.clear()
    
    has_active_subscription = False
    subscription_is_active = False
    
    user_name = user.full_name
    balance_kopeks = user.balance_kopeks
    user_telegram_id = user.telegram_id
    user_language = user.language
    has_had_paid_subscription = user.has_had_paid_subscription
    
    try:
        await message.answer(
            texts.MAIN_MENU.format(
                user_name=user_name,
                balance=texts.format_price(balance_kopeks),
                subscription_status=_get_subscription_status_simple(texts)
            ),
            reply_markup=get_main_menu_keyboard(
                language=user_language,
                is_admin=settings.is_admin(user_telegram_id),
                has_had_paid_subscription=has_had_paid_subscription,
                has_active_subscription=has_active_subscription,
                subscription_is_active=subscription_is_active
            )
        )
        logger.info(f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        try:
            balance_rubles = balance_kopeks / 100
            await message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n"
                f"–ë–∞–ª–∞–Ω—Å: {balance_rubles} ‚ÇΩ\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
                reply_markup=get_main_menu_keyboard(
                    language=user_language,
                    is_admin=settings.is_admin(user_telegram_id),
                    has_had_paid_subscription=has_had_paid_subscription,
                    has_active_subscription=has_active_subscription,
                    subscription_is_active=subscription_is_active
                )
            )
            logger.info(f"‚úÖ Fallback –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
        except Exception as fallback_error:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ fallback –º–µ–Ω—é: {fallback_error}")
            try:
                await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            except:
                pass
    
    logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_telegram_id}")


def _get_subscription_status(user, texts):
    if user.subscription and user.subscription.is_active:
        return getattr(texts, 'SUBSCRIPTION_ACTIVE', '–ê–∫—Ç–∏–≤–Ω–∞')
    return getattr(texts, 'SUBSCRIPTION_NONE', '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏')


def _get_subscription_status_simple(texts):
    return getattr(texts, 'SUBSCRIPTION_NONE', '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏')


def get_referral_code_keyboard(language: str):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    texts = get_texts(language)
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚≠êÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            callback_data="referral_skip"
        )]
    ])


def register_handlers(dp: Dispatcher):
    
    logger.info("üîß === –ù–ê–ß–ê–õ–û —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ start.py ===")
    
    dp.message.register(
        cmd_start,
        Command("start")
    )
    logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω cmd_start")
    
    dp.callback_query.register(
        process_rules_accept,
        F.data.in_(["rules_accept", "rules_decline"]),
        StateFilter(RegistrationStates.waiting_for_rules_accept)
    )
    logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω process_rules_accept")
    
    dp.callback_query.register(
        process_referral_code_skip,
        F.data == "referral_skip",
        StateFilter(RegistrationStates.waiting_for_referral_code)
    )
    logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω process_referral_code_skip")
    
    dp.message.register(
        process_referral_code_input,
        StateFilter(RegistrationStates.waiting_for_referral_code)
    )
    logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω process_referral_code_input")
    
    logger.info("üîß === –ö–û–ù–ï–¶ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ start.py ===")