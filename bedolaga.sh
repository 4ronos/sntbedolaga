#!/bin/bash

# Bedolaga Bot Installer & Manager
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è Telegram –±–æ—Ç–∞
# –í–µ—Ä—Å–∏—è: 1.1

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly NC='\033[0m' # No Color

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_DIR="/opt/bedolaga-bot"
readonly SERVICE_NAME="bedolaga-bot"
readonly DOCKER_COMPOSE_FILE="$PROJECT_DIR/docker-compose.yml"
readonly ENV_FILE="$PROJECT_DIR/.env"
readonly CONFIG_FILE="$PROJECT_DIR/.installer_config"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –æ—Ç –∏–º–µ–Ω–∏ root${NC}"
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo $0"
        exit 1
    fi
}

# –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
print_header() {
    clear
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë${NC}${WHITE}                    BEDOLAGA BOT INSTALLER                    ${NC}${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïë${NC}${CYAN}              –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä           ${NC}${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
check_system() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    if ! command -v lsb_release &> /dev/null; then
        error "lsb_release –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç lsb-release"
        exit 1
    fi
    
    local distro=$(lsb_release -si)
    local version=$(lsb_release -sr)
    
    if [[ "$distro" != "Ubuntu" ]]; then
        error "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Ubuntu. –ù–∞–π–¥–µ–Ω–æ: $distro"
        exit 1
    fi
    
    log "‚úÖ –°–∏—Å—Ç–µ–º–∞: $distro $version"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
update_system() {
    log "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    export DEBIAN_FRONTEND=noninteractive
    apt-get update -y
    apt-get upgrade -y
    apt-get install -y curl wget git jq htop nano vim systemctl
    
    log "‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
install_docker() {
    if command -v docker &> /dev/null; then
        log "‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 0
    fi
    
    log "üê≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    apt-get install -y \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        lsb-release
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ GPG –∫–ª—é—á–∞ Docker
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    apt-get update -y
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    
    # –ó–∞–ø—É—Å–∫ –∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
    systemctl start docker
    systemctl enable docker
    
    log "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –ü–æ–∏—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–≤
detect_webservers() {
    log "üîç –ü–æ–∏—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–≤..."
    
    local webservers=()
    
    # –ü–æ–∏—Å–∫ Nginx
    if systemctl is-active --quiet nginx 2>/dev/null; then
        webservers+=("nginx-system")
        log "‚úÖ –ù–∞–π–¥–µ–Ω: Nginx (—Å–∏—Å—Ç–µ–º–Ω—ã–π)"
    fi
    
    # –ü–æ–∏—Å–∫ Caddy
    if systemctl is-active --quiet caddy 2>/dev/null; then
        webservers+=("caddy-system")
        log "‚úÖ –ù–∞–π–¥–µ–Ω: Caddy (—Å–∏—Å—Ç–µ–º–Ω—ã–π)"
    fi
    
    # –ü–æ–∏—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞–º–∏
    if command -v docker &> /dev/null; then
        local containers=$(docker ps --format "table {{.Names}}\t{{.Image}}" | grep -E "(nginx|caddy)" || true)
        if [[ -n "$containers" ]]; then
            while IFS= read -r line; do
                if [[ "$line" =~ nginx ]]; then
                    webservers+=("nginx-docker:$(echo "$line" | awk '{print $1}')")
                    log "‚úÖ –ù–∞–π–¥–µ–Ω: Nginx –≤ Docker ($(echo "$line" | awk '{print $1}'))"
                elif [[ "$line" =~ caddy ]]; then
                    webservers+=("caddy-docker:$(echo "$line" | awk '{print $1}')")
                    log "‚úÖ –ù–∞–π–¥–µ–Ω: Caddy –≤ Docker ($(echo "$line" | awk '{print $1}'))"
                fi
            done <<< "$containers"
        fi
    fi
    
    if [[ ${#webservers[@]} -eq 0 ]]; then
        warning "–í–µ–±-—Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 1
    fi
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—ã
    printf '%s\n' "${webservers[@]}" > /tmp/detected_webservers
    return 0
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
configure_webserver() {
    local domain="$1"
    
    if [[ ! -f /tmp/detected_webservers ]]; then
        warning "–í–µ–±-—Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É."
        return 0
    fi
    
    local webservers=($(cat /tmp/detected_webservers))
    
    if [[ ${#webservers[@]} -eq 1 ]]; then
        local selected_server="${webservers[0]}"
        log "üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω: $selected_server"
    else
        echo -e "${CYAN}–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–≤:${NC}"
        for i in "${!webservers[@]}"; do
            echo "  $((i+1))) ${webservers[i]}"
        done
        
        while true; do
            read -p "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (1-${#webservers[@]}): " choice
            if [[ "$choice" =~ ^[0-9]+$ ]] && [[ "$choice" -ge 1 ]] && [[ "$choice" -le ${#webservers[@]} ]]; then
                selected_server="${webservers[$((choice-1))]}"
                break
            fi
            echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        done
    fi
    
    configure_selected_webserver "$selected_server" "$domain"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
configure_selected_webserver() {
    local server="$1"
    local domain="$2"
    
    local server_type=$(echo "$server" | cut -d':' -f1)
    local container_name=$(echo "$server" | cut -d':' -f2 -s)
    
    case "$server_type" in
        "nginx-system")
            configure_nginx_system "$domain"
            ;;
        "nginx-docker")
            configure_nginx_docker "$container_name" "$domain"
            ;;
        "caddy-system")
            configure_caddy_system "$domain"
            ;;
        "caddy-docker")
            configure_caddy_docker "$container_name" "$domain"
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞: $server_type"
            ;;
    esac
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx (—Å–∏—Å—Ç–µ–º–Ω—ã–π)
configure_nginx_system() {
    local domain="$1"
    local config_file="/etc/nginx/sites-available/$domain"
    
    log "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx –¥–ª—è –¥–æ–º–µ–Ω–∞: $domain"
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if [[ -f "$config_file" ]]; then
        # –î–æ–±–∞–≤–ª—è–µ–º location –¥–ª—è webhook
        if ! grep -q "/tribute-webhook" "$config_file"; then
            sed -i '/server_name/a\\n    # Tribute webhook\n    location /tribute-webhook {\n        proxy_pass http://127.0.0.1:8081;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n\n    location /webhook-health {\n        proxy_pass http://127.0.0.1:8081/health;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }' "$config_file"
        fi
    else
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        cat > "$config_file" << EOF
server {
    listen 80;
    server_name $domain;

    # Tribute webhook
    location /tribute-webhook {
        proxy_pass http://127.0.0.1:8081;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /webhook-health {
        proxy_pass http://127.0.0.1:8081/health;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }

    location / {
        root /var/www/html;
        index index.html index.htm;
        try_files \$uri \$uri/ =404;
    }
}
EOF
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∞–π—Ç
        ln -sf "$config_file" "/etc/nginx/sites-enabled/"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    if nginx -t; then
        systemctl reload nginx
        log "‚úÖ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω"
    else
        error "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"
        return 1
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Caddy (Docker)
configure_caddy_docker() {
    local container_name="$1"
    local domain="$2"
    
    log "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Caddy Docker –¥–ª—è –¥–æ–º–µ–Ω–∞: $domain"
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å Caddyfile
    local caddy_dir=$(docker inspect "$container_name" | jq -r '.[0].Mounts[] | select(.Destination == "/etc/caddy") | .Source' | head -1)
    
    if [[ -z "$caddy_dir" || "$caddy_dir" == "null" ]]; then
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å Caddyfile –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container_name"
        return 1
    fi
    
    local caddyfile="$caddy_dir/Caddyfile"
    
    if [[ ! -f "$caddyfile" ]]; then
        error "Caddyfile –Ω–µ –Ω–∞–π–¥–µ–Ω: $caddyfile"
        return 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    cp "$caddyfile" "$caddyfile.backup.$(date +%s)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞
    if grep -q "^https://$domain" "$caddyfile" || grep -q "^$domain" "$caddyfile"; then
        log "‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–º–µ–Ω–∞ $domain —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ webhook –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if ! grep -q "/tribute-webhook" "$caddyfile"; then
            # –î–æ–±–∞–≤–ª—è–µ–º webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫
            sed -i "/^https:\/\/$domain\|^$domain/,/^}/ {
                /handle.*{/a\\
    # Tribute webhook endpoint\\
    handle /tribute-webhook* {\\
        reverse_proxy localhost:8081 {\\
            header_up Host {host}\\
            header_up X-Real-IP {remote_host}\\
        }\\
    }\\
    \\
    # Health check –¥–ª—è webhook —Å–µ—Ä–≤–∏—Å–∞\\
    handle /webhook-health {\\
        reverse_proxy localhost:8081/health {\\
            header_up Host {host}\\
            header_up X-Real-IP {remote_host}\\
        }\\
    }
            }" "$caddyfile"
            
            log "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        else
            log "‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        fi
    else
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ–º–µ–Ω–∞
        cat >> "$caddyfile" << EOF

https://$domain {
    # Tribute webhook endpoint
    handle /tribute-webhook* {
        reverse_proxy localhost:8081 {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
        }
    }
    
    # Health check –¥–ª—è webhook —Å–µ—Ä–≤–∏—Å–∞
    handle /webhook-health {
        reverse_proxy localhost:8081/health {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
        }
    }
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ
    handle {
        root * /var/www/html
        try_files {path} /index.html
        file_server
    }
    
    log {
        output file /var/log/caddy/access.log {
            roll_size 10MB
            roll_keep 5
            roll_keep_for 720h
            roll_compression gzip
        }
        level ERROR
    }
}
EOF
        log "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–º–µ–Ω–∞ $domain"
    fi
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Caddy
    if docker exec "$container_name" caddy reload --config /etc/caddy/Caddyfile; then
        log "‚úÖ Caddy –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω"
    else
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ Caddy"
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        cp "$caddyfile.backup.$(date +%s)" "$caddyfile"
        return 1
    fi
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ .env
configure_env() {
    log "‚öôÔ∏è  –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ—Ç–∞..."
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è .env
    local temp_env="/tmp/bedolaga.env"
    
    echo "# Bedolaga Bot Configuration" > "$temp_env"
    echo "# Generated by installer on $(date)" >> "$temp_env"
    echo "" >> "$temp_env"
    
    # Bot Configuration
    echo -e "${CYAN}=== –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ===${NC}"
    
    read -p "ü§ñ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (BOT_TOKEN): " bot_token
    echo "BOT_TOKEN=$bot_token" >> "$temp_env"
    
    read -p "üìù –í–≤–µ–¥–∏—Ç–µ username –±–æ—Ç–∞ –±–µ–∑ @ (BOT_USERNAME): " bot_username
    echo "BOT_USERNAME=$bot_username" >> "$temp_env"
    
    echo "" >> "$temp_env"
    echo "# Referral System" >> "$temp_env"
    
    read -p "üí∞ –ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É (REFERRAL_FIRST_REWARD): " ref_first
    echo "REFERRAL_FIRST_REWARD=$ref_first" >> "$temp_env"
    
    read -p "üéÅ –ù–∞–≥—Ä–∞–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—É (REFERRAL_REFERRED_BONUS): " ref_bonus
    echo "REFERRAL_REFERRED_BONUS=$ref_bonus" >> "$temp_env"
    
    read -p "üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã (REFERRAL_THRESHOLD): " ref_threshold
    echo "REFERRAL_THRESHOLD=$ref_threshold" >> "$temp_env"
    
    read -p "üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (0.20 = 20%) (REFERRAL_PERCENTAGE): " ref_percentage
    echo "REFERRAL_PERCENTAGE=$ref_percentage" >> "$temp_env"
    
    # RemnaWave API
    echo "" >> "$temp_env"
    echo "# RemnaWave API Configuration" >> "$temp_env"
    
    read -p "üåê URL –ø–∞–Ω–µ–ª–∏ RemnaWave (https://panel.example.com): " remnawave_url
    echo "REMNAWAVE_URL=$remnawave_url" >> "$temp_env"
    
    read -p "üîë –¢–æ–∫–µ–Ω RemnaWave API: " remnawave_token
    echo "REMNAWAVE_TOKEN=$remnawave_token" >> "$temp_env"
    
    # Admin Configuration
    echo "" >> "$temp_env"
    echo "# Admin Configuration" >> "$temp_env"
    
    read -p "üëë ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): " admin_ids
    echo "ADMIN_IDS=$admin_ids" >> "$temp_env"
    
    # Support Configuration
    echo "" >> "$temp_env"
    echo "# Support Configuration" >> "$temp_env"
    
    read -p "üÜò Username –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–µ–∑ @: " support_username
    echo "SUPPORT_USERNAME=$support_username" >> "$temp_env"
    
    # Trial Configuration
    echo -e "${CYAN}=== –ù–ê–°–¢–†–û–ô–ö–ò –¢–†–ò–ê–õ–ê ===${NC}"
    
    read -p "üÜì –í–∫–ª—é—á–∏—Ç—å —Ç—Ä–∏–∞–ª? (true/false): " trial_enabled
    echo "TRIAL_ENABLED=$trial_enabled" >> "$temp_env"
    
    if [[ "$trial_enabled" == "true" ]]; then
        read -p "üìÖ –î–Ω–µ–π —Ç—Ä–∏–∞–ª–∞: " trial_days
        echo "TRIAL_DURATION_DAYS=$trial_days" >> "$temp_env"
        
        read -p "üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –ì–ë: " trial_traffic
        echo "TRIAL_TRAFFIC_GB=$trial_traffic" >> "$temp_env"
        
        read -p "üè∑Ô∏è  UUID —Å–∫–≤–∞–¥–∞ –∏–∑ –ø–∞–Ω–µ–ª–∏: " trial_squad
        echo "TRIAL_SQUAD_UUID=$trial_squad" >> "$temp_env"
        
        echo "TRIAL_PRICE=0.0" >> "$temp_env"
        
        read -p "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä–∏–∞–ª–∞? (true/false): " trial_notif
        echo "TRIAL_NOTIFICATION_ENABLED=$trial_notif" >> "$temp_env"
        
        if [[ "$trial_notif" == "true" ]]; then
            read -p "‚è∞ –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —É–≤–µ–¥–æ–º–ª—è—Ç—å: " notif_hours
            echo "TRIAL_NOTIFICATION_HOURS_AFTER=$notif_hours" >> "$temp_env"
            
            read -p "üîÑ –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å: " notif_window
            echo "TRIAL_NOTIFICATION_HOURS_WINDOW=$notif_window" >> "$temp_env"
        fi
    fi
    
    # Monitor Service
    echo "" >> "$temp_env"
    echo "# Monitor Service Settings" >> "$temp_env"
    
    read -p "‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (3600 = —á–∞—Å): " monitor_interval
    echo "MONITOR_CHECK_INTERVAL=$monitor_interval" >> "$temp_env"
    
    read -p "üåÖ –ß–∞—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (0-23): " daily_hour
    echo "MONITOR_DAILY_CHECK_HOUR=$daily_hour" >> "$temp_env"
    
    read -p "‚ö†Ô∏è  –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å: " warning_days
    echo "MONITOR_WARNING_DAYS=$warning_days" >> "$temp_env"
    
    read -p "üóëÔ∏è  –£–¥–∞–ª—è—Ç—å —Ç—Ä–∏–∞–ª —á–µ—Ä–µ–∑ –¥–Ω–µ–π: " delete_trial
    echo "DELETE_EXPIRED_TRIAL_DAYS=$delete_trial" >> "$temp_env"
    
    read -p "üóëÔ∏è  –£–¥–∞–ª—è—Ç—å –æ–±—ã—á–Ω—ã–µ —á–µ—Ä–µ–∑ –¥–Ω–µ–π: " delete_regular
    echo "DELETE_EXPIRED_REGULAR_DAYS=$delete_regular" >> "$temp_env"
    
    read -p "ü§ñ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ? (true/false): " auto_delete
    echo "AUTO_DELETE_ENABLED=$auto_delete" >> "$temp_env"
    
    # Lucky Game
    echo "" >> "$temp_env"
    echo "# Lucky Game Settings" >> "$temp_env"
    
    read -p "üé≤ –í–∫–ª—é—á–∏—Ç—å –∏–≥—Ä—É —É–¥–∞—á–∏? (true/false): " lucky_enabled
    echo "LUCKY_GAME_ENABLED=$lucky_enabled" >> "$temp_env"
    
    if [[ "$lucky_enabled" == "true" ]]; then
        read -p "üí∞ –†–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã –≤ —Ä—É–±–ª—è—Ö: " lucky_reward
        echo "LUCKY_GAME_REWARD=$lucky_reward" >> "$temp_env"
        
        read -p "üî¢ –í—Å–µ–≥–æ —á–∏—Å–µ–ª –¥–ª—è –≤—ã–±–æ—Ä–∞: " lucky_numbers
        echo "LUCKY_GAME_NUMBERS=$lucky_numbers" >> "$temp_env"
        
        read -p "üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: " lucky_winning
        echo "LUCKY_GAME_WINNING_COUNT=$lucky_winning" >> "$temp_env"
    fi
    
    # Telegram Stars
    echo -e "${CYAN}=== TELEGRAM STARS ===${NC}"
    echo "" >> "$temp_env"
    echo "# Telegram Stars Configuration" >> "$temp_env"
    
    read -p "‚≠ê –í–∫–ª—é—á–∏—Ç—å Telegram Stars? (true/false): " stars_enabled
    echo "STARS_ENABLED=$stars_enabled" >> "$temp_env"
    
    if [[ "$stars_enabled" == "true" ]]; then
        declare -a star_amounts=("100" "150" "250" "350" "500" "750" "1000")
        
        for amount in "${star_amounts[@]}"; do
            read -p "üí´ $amount –∑–≤—ë–∑–¥ = —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π: " rate
            echo "STARS_${amount}_RATE=$rate" >> "$temp_env"
        done
    fi
    
    # Tribute
    echo -e "${CYAN}=== TRIBUTE –î–û–ù–ê–¢–´ ===${NC}"
    echo "" >> "$temp_env"
    echo "# Tribute Configuration" >> "$temp_env"
    
    read -p "üéÅ –í–∫–ª—é—á–∏—Ç—å Tribute? (true/false): " tribute_enabled
    echo "TRIBUTE_ENABLED=$tribute_enabled" >> "$temp_env"
    
    if [[ "$tribute_enabled" == "true" ]]; then
        read -p "üîë API –∫–ª—é—á Tribute: " tribute_api
        echo "TRIBUTE_API_KEY=$tribute_api" >> "$temp_env"
        
        read -p "üö™ –ü–æ—Ä—Ç webhook (8081): " webhook_port
        webhook_port=${webhook_port:-8081}
        echo "TRIBUTE_WEBHOOK_PORT=$webhook_port" >> "$temp_env"
        
        echo "TRIBUTE_WEBHOOK_PATH=/tribute-webhook" >> "$temp_env"
        
        read -p "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–Ω–∞—Ç –≤ Tribute: " tribute_link
        echo "TRIBUTE_DONATE_LINK=$tribute_link" >> "$temp_env"
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–º–µ–Ω –¥–ª—è webhook
        echo -e "${CYAN}=== –ù–ê–°–¢–†–û–ô–ö–ê –í–ï–ë–•–£–ö–ê ===${NC}"
        read -p "üåê –î–æ–º–µ–Ω –¥–ª—è webhook (example.com): " webhook_domain
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        configure_webserver "$webhook_domain"
    fi
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ
    cp "$temp_env" "$ENV_FILE"
    log "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
create_project_structure() {
    log "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
    
    mkdir -p "$PROJECT_DIR"/{logs,data,backups}
    chown -R root:docker "$PROJECT_DIR" 2>/dev/null || chown -R root:root "$PROJECT_DIR"
    chmod -R 755 "$PROJECT_DIR"
    
    log "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yml
create_docker_compose() {
    log "üê≥ –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yml..."
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ë–î
    local db_password=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
    
    cat > "$DOCKER_COMPOSE_FILE" << 'EOF'
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bedolaga_bot_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: bedolaga_bot
      POSTGRES_USER: bedolaga_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bedolaga_user -d bedolaga_bot"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
  
  # Bedolaga Bot
  bot:
    image: fr1ngg/remnawave-bedolaga-telegram-bot:latest
    container_name: bedolaga_bot
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://bedolaga_user:${DB_PASSWORD}@postgres:5432/bedolaga_bot
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "${TRIBUTE_WEBHOOK_PORT:-8081}:${TRIBUTE_WEBHOOK_PORT:-8081}"
    networks:
      - bot_network
    healthcheck:
      test: ["CMD-SHELL", "python -c 'print(\"Bot is running\")'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local

networks:
  bot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
EOF
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ë–î –≤ .env
    echo "" >> "$ENV_FILE"
    echo "# Database Configuration" >> "$ENV_FILE"
    echo "DB_PASSWORD=$db_password" >> "$ENV_FILE"
    
    log "‚úÖ Docker Compose —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–ª—É–∂–±—ã
create_systemd_service() {
    local create_service=""
    
    echo -e "${CYAN}–°–æ–∑–¥–∞—Ç—å systemd —Å–ª—É–∂–±—É –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞? (y/n):${NC}"
    read -r create_service
    
    if [[ "$create_service" =~ ^[Yy]$ ]]; then
        log "‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–ª—É–∂–±—ã..."
        
        cat > "/etc/systemd/system/${SERVICE_NAME}.service" << EOF
[Unit]
Description=Bedolaga Telegram Bot
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=true
WorkingDirectory=$PROJECT_DIR
ExecStart=/usr/bin/docker compose up -d
ExecStop=/usr/bin/docker compose down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF
        
        systemctl daemon-reload
        systemctl enable "$SERVICE_NAME"
        
        log "‚úÖ Systemd —Å–ª—É–∂–±–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∞"
        echo "DB_PASSWORD" >> "$CONFIG_FILE"
    fi
}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
start_bot() {
    log "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
    
    cd "$PROJECT_DIR"
    
    if docker compose up -d; then
        log "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        sleep 5
        show_status
    else
        error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"
        return 1
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
show_status() {
    echo -e "${CYAN}=== –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í ===${NC}"
    
    cd "$PROJECT_DIR"
    docker compose ps
    
    echo -e "\n${CYAN}=== –õ–û–ì–ò –ë–û–¢–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫) ===${NC}"
    docker compose logs --tail=20 bot
}

# –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
start_bot_service() {
    log "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
    cd "$PROJECT_DIR"
    docker compose up -d
    log "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"
}

stop_bot_service() {
    log "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞..."
    cd "$PROJECT_DIR"
    docker compose down
    log "‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

restart_bot_service() {
    log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
    cd "$PROJECT_DIR"
    docker compose restart
    log "‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
view_logs() {
    echo -e "${CYAN}–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:${NC}"
    echo "1) –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫"
    echo "2) –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫"
    echo "3) –í —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)"
    echo "4) –û—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ"
    
    read -p "–í–∞—à –≤—ã–±–æ—Ä (1-4): " log_choice
    
    cd "$PROJECT_DIR"
    
    case $log_choice in
        1)
            docker compose logs --tail=50 bot
            ;;
        2)
            docker compose logs --tail=100 bot
            ;;
        3)
            echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞${NC}"
            docker compose logs -f bot
            ;;
        4)
            docker compose logs bot | grep -i error
            ;;
        *)
            echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
create_backup() {
    log "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î..."
    
    local backup_name="bedolaga_backup_$(date +%Y%m%d_%H%M%S).sql"
    local backup_path="$PROJECT_DIR/backups/$backup_name"
    
    cd "$PROJECT_DIR"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –ë–î –∏–∑ .env
    local db_password=$(grep "^DB_PASSWORD=" .env | cut -d'=' -f2)
    
    if docker compose exec -T postgres pg_dump -U bedolaga_user -d bedolaga_bot > "$backup_path"; then
        log "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backup_name"
        
        # –°–∂–∏–º–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        gzip "$backup_path"
        log "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–∂–∞—Ç–∞: ${backup_name}.gz"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        find "$PROJECT_DIR/backups" -name "*.sql.gz" -type f | sort -r | tail -n +11 | xargs rm -f
        
        echo -e "${GREEN}–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: $PROJECT_DIR/backups/${backup_name}.gz${NC}"
    else
        error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        return 1
    fi
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
restore_backup() {
    echo -e "${CYAN}=== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò ===${NC}"
    
    local backups_dir="$PROJECT_DIR/backups"
    
    if [[ ! -d "$backups_dir" ]] || [[ -z "$(ls -A "$backups_dir"/*.sql.gz 2>/dev/null)" ]]; then
        error "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ $backups_dir"
        return 1
    fi
    
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:"
    local backups=($(ls -1t "$backups_dir"/*.sql.gz))
    
    for i in "${!backups[@]}"; do
        local backup_file=$(basename "${backups[i]}")
        local backup_date=$(echo "$backup_file" | grep -o '[0-9]\{8\}_[0-9]\{6\}')
        local formatted_date=$(echo "$backup_date" | sed 's/\([0-9]\{4\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)_\([0-9]\{2\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)/\1-\2-\3 \4:\5:\6/')
        echo "  $((i+1))) $backup_file ($formatted_date)"
    done
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (1-${#backups[@]}): " backup_choice
    
    if [[ ! "$backup_choice" =~ ^[0-9]+$ ]] || [[ "$backup_choice" -lt 1 ]] || [[ "$backup_choice" -gt ${#backups[@]} ]]; then
        error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
        return 1
    fi
    
    local selected_backup="${backups[$((backup_choice-1))]}"
    
    echo -e "${RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!${NC}"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " confirm
    
    if [[ "$confirm" != "yes" ]]; then
        echo "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    log "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ $selected_backup..."
    
    cd "$PROJECT_DIR"
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    docker compose stop bot
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ë–î
    if zcat "$selected_backup" | docker compose exec -T postgres psql -U bedolaga_user -d bedolaga_bot; then
        log "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        docker compose start bot
        log "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"
    else
        error "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        docker compose start bot
        return 1
    fi
}

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
edit_config() {
    echo -e "${CYAN}=== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===${NC}"
    echo "1) –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env —Ñ–∞–π–ª"
    echo "2) –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å docker-compose.yml"
    echo "3) –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å .env –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ"
    
    read -p "–í–∞—à –≤—ã–±–æ—Ä (1-3): " edit_choice
    
    case $edit_choice in
        1)
            if command -v nano &> /dev/null; then
                nano "$ENV_FILE"
            elif command -v vim &> /dev/null; then
                vim "$ENV_FILE"
            else
                error "–†–µ–¥–∞–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ nano –∏–ª–∏ vim"
                return 1
            fi
            
            read -p "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π? (y/n): " restart_choice
            if [[ "$restart_choice" =~ ^[Yy]$ ]]; then
                restart_bot_service
            fi
            ;;
        2)
            if command -v nano &> /dev/null; then
                nano "$DOCKER_COMPOSE_FILE"
            elif command -v vim &> /dev/null; then
                vim "$DOCKER_COMPOSE_FILE"
            else
                error "–†–µ–¥–∞–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ nano –∏–ª–∏ vim"
                return 1
            fi
            
            read -p "–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π? (y/n): " recreate_choice
            if [[ "$recreate_choice" =~ ^[Yy]$ ]]; then
                cd "$PROJECT_DIR"
                docker compose up -d --force-recreate
            fi
            ;;
        3)
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ .env
            cp "$ENV_FILE" "$ENV_FILE.backup.$(date +%s)"
            configure_env
            restart_bot_service
            ;;
        *)
            echo "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            ;;
    esac
}

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
run_diagnostics() {
    echo -e "${CYAN}=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ ===${NC}"
    
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
    if systemctl is-active --quiet docker; then
        echo -e "  ‚úÖ Docker: ${GREEN}–ó–∞–ø—É—â–µ–Ω${NC}"
    else
        echo -e "  ‚ùå Docker: ${RED}–ù–µ –∑–∞–ø—É—â–µ–Ω${NC}"
    fi
    
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    cd "$PROJECT_DIR"
    
    local db_status=$(docker compose ps postgres --format "{{.State}}")
    local bot_status=$(docker compose ps bot --format "{{.State}}")
    
    echo -e "  PostgreSQL: ${db_status}"
    echo -e "  Bot: ${bot_status}"
    
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
    local webhook_port=$(grep "^TRIBUTE_WEBHOOK_PORT=" "$ENV_FILE" | cut -d'=' -f2)
    webhook_port=${webhook_port:-8081}
    
    if netstat -tuln | grep -q ":$webhook_port "; then
        echo -e "  ‚úÖ –ü–æ—Ä—Ç $webhook_port: ${GREEN}–û—Ç–∫—Ä—ã—Ç${NC}"
    else
        echo -e "  ‚ùå –ü–æ—Ä—Ç $webhook_port: ${RED}–ó–∞–∫—Ä—ã—Ç${NC}"
    fi
    
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ..."
    df -h "$PROJECT_DIR"
    
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏..."
    local error_count=$(docker compose logs bot 2>/dev/null | grep -ci error || echo "0")
    echo -e "  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö: $error_count"
    
    if [[ "$error_count" -gt 0 ]]; then
        echo -e "${YELLOW}–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:${NC}"
        docker compose logs bot | grep -i error | tail -5
    fi
    
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    if [[ -f "$ENV_FILE" ]]; then
        echo -e "  ‚úÖ .env —Ñ–∞–π–ª: ${GREEN}–°—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        local required_vars=("BOT_TOKEN" "REMNAWAVE_URL" "REMNAWAVE_TOKEN")
        for var in "${required_vars[@]}"; do
            if grep -q "^$var=" "$ENV_FILE" && [[ -n "$(grep "^$var=" "$ENV_FILE" | cut -d'=' -f2)" ]]; then
                echo -e "    ‚úÖ $var: ${GREEN}–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ${NC}"
            else
                echo -e "    ‚ùå $var: ${RED}–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ${NC}"
            fi
        done
    else
        echo -e "  ‚ùå .env —Ñ–∞–π–ª: ${RED}–ù–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
}

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
auto_update() {
    log "üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞..."
    
    cd "$PROJECT_DIR"
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    create_backup
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑
    if docker compose pull bot; then
        log "‚úÖ –ù–æ–≤—ã–π –æ–±—Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω"
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º –æ–±—Ä–∞–∑–æ–º
        docker compose up -d bot
        
        log "‚úÖ –ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        sleep 3
        show_status
    else
        error "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞"
        return 1
    fi
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
management_menu() {
    while true; do
        clear
        print_header
        
        echo -e "${CYAN}=== –ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–û–¢–û–ú ===${NC}"
        echo
        echo "üöÄ 1) –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
        echo "‚èπÔ∏è  2) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
        echo "üîÑ 3) –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
        echo "üìä 4) –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"
        echo "üì∫ 5) –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
        echo "üíæ 6) –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
        echo "üîô 7) –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        echo "‚úèÔ∏è  8) –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        echo "ü©∫ 9) –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
        echo "üîÑ 10) –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
        echo "‚ùå 0) –í—ã—Ö–æ–¥"
        echo
        
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-10): " choice
        
        case $choice in
            1)
                start_bot_service
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            2)
                stop_bot_service
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            3)
                restart_bot_service
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            4)
                show_status
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            5)
                view_logs
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            6)
                create_backup
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            7)
                restore_backup
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            8)
                edit_config
                ;;
            9)
                run_diagnostics
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            10)
                auto_update
                read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                ;;
            0)
                echo -e "${GREEN}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.${NC}"
                sleep 2
                ;;
        esac
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Nginx (—Å–∏—Å—Ç–µ–º–Ω—ã–π)
configure_nginx_system() {
    local domain="$1"
    local config_file="/etc/nginx/sites-available/$domain"
    
    log "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx –¥–ª—è –¥–æ–º–µ–Ω–∞: $domain"
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if [[ -f "$config_file" ]]; then
        # –î–æ–±–∞–≤–ª—è–µ–º location –¥–ª—è webhook
        if ! grep -q "/tribute-webhook" "$config_file"; then
            sed -i '/server_name/a\\n    # Tribute webhook\n    location /tribute-webhook {\n        proxy_pass http://127.0.0.1:8081;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n\n    location /webhook-health {\n        proxy_pass http://127.0.0.1:8081/health;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }' "$config_file"
            log "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        else
            log "‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        fi
    else
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        cat > "$config_file" << EOF
server {
    listen 80;
    server_name $domain;

    # Tribute webhook
    location /tribute-webhook {
        proxy_pass http://127.0.0.1:8081;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /webhook-health {
        proxy_pass http://127.0.0.1:8081/health;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }

    location / {
        root /var/www/html;
        index index.html index.htm;
        try_files \$uri \$uri/ =404;
    }
}
EOF
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∞–π—Ç
        ln -sf "$config_file" "/etc/nginx/sites-enabled/"
        log "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è $domain"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    if nginx -t; then
        systemctl reload nginx
        log "‚úÖ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω"
    else
        error "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Caddy (—Å–∏—Å—Ç–µ–º–Ω—ã–π)
configure_caddy_system() {
    local domain="$1"
    local caddyfile="/etc/caddy/Caddyfile"
    
    log "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ Caddy –¥–ª—è –¥–æ–º–µ–Ω–∞: $domain"
    
    if [[ ! -f "$caddyfile" ]]; then
        error "Caddyfile –Ω–µ –Ω–∞–π–¥–µ–Ω: $caddyfile"
        return 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    cp "$caddyfile" "$caddyfile.backup.$(date +%s)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞
    if grep -q "^https://$domain\|^$domain" "$caddyfile"; then
        log "‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–º–µ–Ω–∞ $domain —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ webhook –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if ! grep -q "/tribute-webhook" "$caddyfile"; then
            # –î–æ–±–∞–≤–ª—è–µ–º webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫
            sed -i "/^https:\/\/$domain\|^$domain/,/^}/ {
                /handle.*{/a\\
    # Tribute webhook endpoint\\
    handle /tribute-webhook* {\\
        reverse_proxy localhost:8081 {\\
            header_up Host {host}\\
            header_up X-Real-IP {remote_host}\\
        }\\
    }\\
    \\
    # Health check –¥–ª—è webhook —Å–µ—Ä–≤–∏—Å–∞\\
    handle /webhook-health {\\
        reverse_proxy localhost:8081/health {\\
            header_up Host {host}\\
            header_up X-Real-IP {remote_host}\\
        }\\
    }
            }" "$caddyfile"
            
            log "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        else
            log "‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        fi
    else
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ–º–µ–Ω–∞
        cat >> "$caddyfile" << EOF

https://$domain {
    # Tribute webhook endpoint
    handle /tribute-webhook* {
        reverse_proxy localhost:8081 {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
        }
    }
    
    # Health check –¥–ª—è webhook —Å–µ—Ä–≤–∏—Å–∞
    handle /webhook-health {
        reverse_proxy localhost:8081/health {
            header_up Host {host}
            header_up X-Real-IP {remote_host}
        }
    }
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ
    handle {
        root * /var/www/html
        try_files {path} /index.html
        file_server
    }
    
    log {
        output file /var/log/caddy/access.log {
            roll_size 10MB
            roll_keep 5
            roll_keep_for 720h
            roll_compression gzip
        }
        level ERROR
    }
}
EOF
        log "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–º–µ–Ω–∞ $domain"
    fi
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Caddy
    if systemctl reload caddy; then
        log "‚úÖ Caddy –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω"
    else
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ Caddy"
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        cp "$caddyfile.backup.$(date +%s)" "$caddyfile"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Nginx (Docker)
configure_nginx_docker() {
    local container_name="$1"
    local domain="$2"
    
    log "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx Docker –¥–ª—è –¥–æ–º–µ–Ω–∞: $domain"
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π nginx
    local nginx_dir=$(docker inspect "$container_name" | jq -r '.[0].Mounts[] | select(.Destination | contains("nginx")) | .Source' | head -1)
    
    if [[ -z "$nginx_dir" || "$nginx_dir" == "null" ]]; then
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π nginx –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container_name"
        return 1
    fi
    
    local config_file="$nginx_dir/conf.d/$domain.conf"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ–º–µ–Ω–∞
    cat > "$config_file" << EOF
server {
    listen 80;
    server_name $domain;

    # Tribute webhook
    location /tribute-webhook {
        proxy_pass http://host.docker.internal:8081;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    location /webhook-health {
        proxy_pass http://host.docker.internal:8081/health;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }

    location / {
        root /var/www/html;
        index index.html index.htm;
        try_files \$uri \$uri/ =404;
    }
}
EOF
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    if docker exec "$container_name" nginx -t && docker exec "$container_name" nginx -s reload; then
        log "‚úÖ Nginx –≤ Docker –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω"
    else
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ Nginx –≤ Docker"
        rm -f "$config_file"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
main_install() {
    print_header
    
    log "üöÄ –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Bedolaga Bot..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_root
    check_system
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    update_system
    install_docker
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    create_project_structure
    
    # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–≤
    detect_webservers
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    configure_env
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    create_docker_compose
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±—ã
    create_systemd_service
    
    # –ó–∞–ø—É—Å–∫
    start_bot
    
    log "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    
    echo -e "${GREEN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!                       ‚ïë"
    echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
    echo "‚ïë –ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: $PROJECT_DIR"
    echo "‚ïë –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ: $0 --manage"
    echo "‚ïë –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ docker compose"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    
    read -p "–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å? (y/n): " start_menu
    if [[ "$start_menu" =~ ^[Yy]$ ]]; then
        management_menu
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
main() {
    case "${1:-}" in
        --manage|manage|-m)
            if [[ ! -d "$PROJECT_DIR" ]]; then
                error "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $PROJECT_DIR. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."
                exit 1
            fi
            management_menu
            ;;
        --install|install|-i|"")
            main_install
            ;;
        --help|help|-h)
            print_header
            echo -e "${CYAN}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}"
            echo "  $0                 # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"
            echo "  $0 --install       # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"
            echo "  $0 --manage        # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            echo "  $0 --help          # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ $0 --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
    esac
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'echo -e "\n${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º${NC}"; exit 130' INT
trap 'echo -e "\n${RED}–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞${NC}"; exit 1' ERR

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
