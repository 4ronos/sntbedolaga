import os
from dataclasses import dataclass, field
from typing import List
import logging

try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: {e}")

logger = logging.getLogger(__name__)

@dataclass
class Config:
    # Bot settings
    BOT_TOKEN: str = field(default="")
    DATABASE_URL: str = field(default="sqlite+aiosqlite:///bot.db")
    
    # RemnaWave API settings
    REMNAWAVE_URL: str = field(default="")
    REMNAWAVE_TOKEN: str = field(default="")
    SUBSCRIPTION_BASE_URL: str = field(default="")
    
    # Admin settings
    ADMIN_IDS: List[int] = field(default_factory=list)
    SUPPORT_USERNAME: str = field(default="support")
    
    # Bot settings
    DEFAULT_LANGUAGE: str = field(default="ru")
    BOT_USERNAME: str = field(default="")  # –ò–ú–Ø –ë–û–¢–ê –î–õ–Ø –†–ï–§–ï–†–ê–õ–¨–ù–´–• –°–°–´–õ–û–ö
    
    # Trial subscription settings
    TRIAL_ENABLED: bool = field(default=False)
    TRIAL_DURATION_DAYS: int = field(default=3)
    TRIAL_TRAFFIC_GB: int = field(default=2)
    TRIAL_SQUAD_UUID: str = field(default="")
    

    MONITOR_WARNING_DAYS: int = field(default=3)
    MONITOR_CHECK_INTERVAL: int = field(default=3600)  # 1 —á–∞—Å
    MONITOR_DAILY_CHECK_HOUR: int = field(default=9)   # 9 —É—Ç—Ä–∞

    # Referral program settings
    REFERRAL_FIRST_REWARD: float = field(default=150.0)  # –ü–µ—Ä–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
    REFERRAL_REFERRED_BONUS: float = field(default=150.0)  # –ë–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É
    REFERRAL_THRESHOLD: float = field(default=300.0)  # –ü–æ—Ä–æ–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
    REFERRAL_PERCENTAGE: float = field(default=0.25)  # 25% —Å –ø–ª–∞—Ç–µ–∂–µ–π

def parse_admin_ids(admin_ids_str: str) -> List[int]:
    """Parse admin IDs from string"""
    if not admin_ids_str:
        return []
    
    try:
        # Support both comma and space separated
        ids_str = admin_ids_str.replace(',', ' ').strip()
        return [int(id_str.strip()) for id_str in ids_str.split() if id_str.strip().isdigit()]
    except ValueError as e:
        logger.error(f"Error parsing admin IDs: {e}")
        return []

def str_to_bool(value: str) -> bool:
    """Convert string to boolean"""
    if isinstance(value, bool):
        return value
    return value.lower() in ('true', '1', 'yes', 'on', 'enabled')

def load_config() -> Config:
    """Load configuration from environment variables"""
    
    # –î–µ–±–∞–≥: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    print(f"üîç BOT_USERNAME –∏–∑ env: '{os.getenv('BOT_USERNAME', '–ù–ï –ù–ê–ô–î–ï–ù')}'")
    print(f"üîç REFERRAL_FIRST_REWARD –∏–∑ env: '{os.getenv('REFERRAL_FIRST_REWARD', '–ù–ï –ù–ê–ô–î–ï–ù')}'")
    
    config = Config(
        # Bot settings
        BOT_TOKEN=os.getenv("BOT_TOKEN", ""),
        DATABASE_URL=os.getenv("DATABASE_URL", "sqlite+aiosqlite:///bot.db"),
        
        # RemnaWave API settings
        REMNAWAVE_URL=os.getenv("REMNAWAVE_URL", ""),
        REMNAWAVE_TOKEN=os.getenv("REMNAWAVE_TOKEN", ""),
        SUBSCRIPTION_BASE_URL=os.getenv("SUBSCRIPTION_BASE_URL", ""),
        
        # Admin settings
        ADMIN_IDS=parse_admin_ids(os.getenv("ADMIN_IDS", "")),
        SUPPORT_USERNAME=os.getenv("SUPPORT_USERNAME", "support"),
        
        # Bot settings
        DEFAULT_LANGUAGE=os.getenv("DEFAULT_LANGUAGE", "ru"),
        BOT_USERNAME=os.getenv("BOT_USERNAME", ""),  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ—Ä–µ—Ç—Å—è –∏–∑ env
        
        # Trial settings
        TRIAL_ENABLED=str_to_bool(os.getenv("TRIAL_ENABLED", "false")),
        TRIAL_DURATION_DAYS=int(os.getenv("TRIAL_DURATION_DAYS", "3")),
        TRIAL_TRAFFIC_GB=int(os.getenv("TRIAL_TRAFFIC_GB", "2")),
        TRIAL_SQUAD_UUID=os.getenv("TRIAL_SQUAD_UUID", ""),

        MONITOR_WARNING_DAYS=int(os.getenv("MONITOR_WARNING_DAYS", "3")),
        MONITOR_CHECK_INTERVAL=int(os.getenv("MONITOR_CHECK_INTERVAL", "3600")),
        MONITOR_DAILY_CHECK_HOUR=int(os.getenv("MONITOR_DAILY_CHECK_HOUR", "9")),
        
        # Referral settings
        REFERRAL_FIRST_REWARD=float(os.getenv("REFERRAL_FIRST_REWARD", "150.0")),
        REFERRAL_REFERRED_BONUS=float(os.getenv("REFERRAL_REFERRED_BONUS", "150.0")),
        REFERRAL_THRESHOLD=float(os.getenv("REFERRAL_THRESHOLD", "300.0")),
        REFERRAL_PERCENTAGE=float(os.getenv("REFERRAL_PERCENTAGE", "0.25")),
    )
    
    print(f"‚úÖ Config BOT_USERNAME: '{config.BOT_USERNAME}'")
    print(f"‚úÖ Config REFERRAL_FIRST_REWARD: {config.REFERRAL_FIRST_REWARD}")
    
    return config

def load_config_manual_dotenv() -> Config:
    """Load config with manual .env parsing"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é –µ—Å–ª–∏ python-dotenv –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
    env_path = ".env"
    if os.path.exists(env_path):
        try:
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                        value = value.strip('"\'')
                        os.environ[key] = value
            print(f"‚úÖ –§–∞–π–ª {env_path} –∑–∞–≥—Ä—É–∂–µ–Ω –≤—Ä—É—á–Ω—É—é")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {env_path}: {e}")
    
    return load_config()

def debug_environment():
    """Debug environment variables loading"""
    print("\n=== DEBUG ENVIRONMENT VARIABLES ===")
    
    # –ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    key_vars = [
        'BOT_TOKEN', 'BOT_USERNAME', 'REMNAWAVE_URL', 'REMNAWAVE_TOKEN',
        'ADMIN_IDS', 'REFERRAL_FIRST_REWARD', 'REFERRAL_THRESHOLD'
    ]
    
    for var in key_vars:
        value = os.getenv(var, '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')
        print(f"{var}: {value}")
    
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª .env
    if os.path.exists('.env'):
        print("üìÅ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
        try:
            with open('.env', 'r') as f:
                lines = f.readlines()
                print(f"üìÑ –°—Ç—Ä–æ–∫ –≤ .env: {len(lines)}")
                for i, line in enumerate(lines[:5], 1):  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                    if 'TOKEN' not in line:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                        print(f"   {i}: {line.strip()}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: {e}")
    else:
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print(f"üìç –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    print("=" * 40 + "\n")
