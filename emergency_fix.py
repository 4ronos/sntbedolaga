"""
–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–æ–∫
–≠—Ç–æ—Ç –ø–∞—Ç—á –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É user_subscriptions
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from config import load_config
from database import Database
from sqlalchemy import text
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def check_and_add_column(db, column_name, column_definition):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É"""
    try:
        # –û—Ç–¥–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        async with db.engine.begin() as conn:
            await conn.execute(text(f"SELECT {column_name} FROM user_subscriptions LIMIT 1"))
            logger.info(f"‚úÖ –ü–æ–ª–µ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
    except Exception:
        # –û—Ç–¥–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
        try:
            async with db.engine.begin() as conn:
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ {column_name}...")
                await conn.execute(text(f"""
                    ALTER TABLE user_subscriptions 
                    ADD COLUMN {column_name} {column_definition}
                """))
                logger.info(f"‚úÖ –ü–æ–ª–µ {column_name} –¥–æ–±–∞–≤–ª–µ–Ω–æ")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {column_name}: {e}")
            return False

async def emergency_fix():
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö  
        db = Database(config.DATABASE_URL)
        
        logger.info("üîß –í—ã–ø–æ–ª–Ω—è—é —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_subscriptions
        try:
            async with db.engine.begin() as conn:
                result = await conn.execute(text("SELECT COUNT(*) FROM user_subscriptions"))
                count = result.scalar()
                logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {count} –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ user_subscriptions")
        except Exception as e:
            logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ user_subscriptions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
            await db.close()
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ –æ–¥–Ω–æ–º—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
        success1 = await check_and_add_column(db, "auto_pay_enabled", "BOOLEAN DEFAULT FALSE")
        success2 = await check_and_add_column(db, "auto_pay_days_before", "INTEGER DEFAULT 3")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if success1 and success2:
            try:
                async with db.engine.begin() as conn:
                    result = await conn.execute(text("""
                        SELECT id, auto_pay_enabled, auto_pay_days_before 
                        FROM user_subscriptions LIMIT 1
                    """))
                    row = result.fetchone()
                    if row:
                        logger.info("‚úÖ –í—Å–µ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —á—Ç–µ–Ω–∏—è")
                        logger.info(f"üîç –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏: id={row[0]}, auto_pay_enabled={row[1]}, auto_pay_days_before={row[2]}")
                    else:
                        logger.info("‚úÖ –í—Å–µ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
                        
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–ª—è –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è")
                
        await db.close()
        logger.info("üéâ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(emergency_fix())
