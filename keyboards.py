from database import Subscription
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Optional, Dict
from translations import t

def language_keyboard() -> InlineKeyboardMarkup:
    """Language selection keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_en")
        ]
    ])
    return keyboard

def main_menu_keyboard(lang: str = 'ru', is_admin: bool = False, show_trial: bool = False) -> InlineKeyboardMarkup:
    """Beautiful main menu keyboard with emojis and better layout"""
    buttons = [
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        [
            InlineKeyboardButton(text="üí∞ " + t('balance', lang), callback_data="balance"),
            InlineKeyboardButton(text="üìã " + t('my_subscriptions', lang), callback_data="my_subscriptions")
        ],
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–≤—ã–¥–µ–ª–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞–∫ –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        [InlineKeyboardButton(text="üõí " + t('buy_subscription', lang), callback_data="buy_subscription")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if show_trial:
        buttons.insert(1, [InlineKeyboardButton(text="üÜì –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="trial_subscription")])

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    buttons.extend([
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        [
            InlineKeyboardButton(text="üéÅ " + t('promocode', lang), callback_data="promocode"),
            InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referral_program")  # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        ],
        [
            InlineKeyboardButton(text="üí¨ " + t('support', lang), callback_data="support")
        ],
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        [InlineKeyboardButton(text="üåê " + t('change_language', lang), callback_data="change_language")]
    ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if is_admin:
        buttons.append([InlineKeyboardButton(text="‚öôÔ∏è " + t('admin_panel', lang), callback_data="admin_panel")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏...
def balance_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful balance menu keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ " + t('topup_balance', lang), callback_data="topup_balance")],
        [InlineKeyboardButton(text="üìä " + t('payment_history', lang), callback_data="payment_history")],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="main_menu")]
    ])
    return keyboard

def topup_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful top up balance keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        # [InlineKeyboardButton(text="üí≥ " + t('topup_card', lang), callback_data="topup_card")],
        [InlineKeyboardButton(text="üë®‚Äçüíº " + t('topup_support', lang), callback_data="topup_support")],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="balance")]
    ])
    return keyboard

def subscriptions_keyboard(subscriptions: List[dict], lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful available subscriptions keyboard"""
    buttons = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    for i in range(0, len(subscriptions), 2):
        row = []
        for j in range(2):
            if i + j < len(subscriptions):
                sub = subscriptions[i + j]
                price_text = f"{sub['price']:.0f}‚ÇΩ"
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                if sub['price'] <= 100:
                    emoji = "ü•â"
                elif sub['price'] <= 300:
                    emoji = "ü•à"
                else:
                    emoji = "ü•á"
                
                row.append(InlineKeyboardButton(
                    text=f"{emoji} {sub['name']} - {price_text}",
                    callback_data=f"buy_sub_{sub['id']}"
                ))
        buttons.append(row)
    
    buttons.append([InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def subscription_detail_keyboard(subscription_id: int, lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful subscription detail keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üíé " + t('buy_subscription_btn', lang, price=0), 
            callback_data=f"confirm_buy_{subscription_id}"
        )],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="buy_subscription")]
    ])
    return keyboard

def user_subscriptions_keyboard(user_subscriptions: List[dict], lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful user's subscriptions keyboard"""
    buttons = []
    
    for sub in user_subscriptions:
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        buttons.append([InlineKeyboardButton(
            text=f"üì± {sub['name']}",
            callback_data=f"view_sub_{sub['id']}"
        )])
    
    if not user_subscriptions:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏
        buttons.append([InlineKeyboardButton(text="üõí " + t('buy_subscription', lang), callback_data="buy_subscription")])
    
    buttons.append([InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def user_subscription_detail_keyboard(subscription_id: int, lang: str = 'ru', show_extend: bool = False, is_imported: bool = False) -> InlineKeyboardMarkup:
    """Beautiful user's subscription detail keyboard with connection and optional extend button - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    buttons = []
    
    # –ù–û–í–û–ï: –†–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if is_imported:
        # –î–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ - —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–π
        buttons.append([InlineKeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", callback_data=f"get_connection_{subscription_id}")])
        buttons.append([InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")])
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ - –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
        if show_extend:
            buttons.append([InlineKeyboardButton(text="‚è∞ " + t('extend_subscription', lang), callback_data=f"extend_sub_{subscription_id}")])
        
        # Connection button (–≥–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞)
        buttons.append([InlineKeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", callback_data=f"get_connection_{subscription_id}")])
    
    # Back button
    buttons.append([InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="my_subscriptions")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def extend_subscription_keyboard(subscription_id: int, lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful extend subscription confirmation keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"confirm_extend_{subscription_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_sub_{subscription_id}")
        ]
    ])
    return keyboard

def back_keyboard(callback_data: str, lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful back button keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data=callback_data)]
    ])
    return keyboard

def cancel_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful cancel button keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå " + t('cancel', lang), callback_data="main_menu")]
    ])
    return keyboard

# Admin keyboards

def admin_menu_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful admin menu keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        [
            InlineKeyboardButton(text="üì¶ " + t('manage_subscriptions', lang), callback_data="admin_subscriptions"),
            InlineKeyboardButton(text="üë• " + t('manage_users', lang), callback_data="admin_users")
        ],
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - —Ñ–∏–Ω–∞–Ω—Å—ã
        [
            InlineKeyboardButton(text="üí∞ " + t('manage_balance', lang), callback_data="admin_balance"),
            InlineKeyboardButton(text="üéÅ " + t('manage_promocodes', lang), callback_data="admin_promocodes")
        ],
        # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ —Å–∏—Å—Ç–µ–º–∞
        [
            InlineKeyboardButton(text="üì® " + t('send_message', lang), callback_data="admin_messages"),
            InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="admin_referrals")  # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        ],
        [
            InlineKeyboardButton(text="üñ• –°–∏—Å—Ç–µ–º–∞ RemnaWave", callback_data="admin_system")
        ],
        # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        [
            InlineKeyboardButton(text="üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="admin_monitor"),
            InlineKeyboardButton(text="üìä " + t('statistics', lang), callback_data="admin_stats")
        ],
        # –ù–∞–∑–∞–¥
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="main_menu")]
    ])
    return keyboard

def admin_subscriptions_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful admin subscriptions management keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï " + t('create_subscription', lang), callback_data="create_subscription")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="list_admin_subscriptions")],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="admin_panel")]
    ])
    return keyboard

def admin_users_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful admin users management keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="search_user")],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="admin_panel")]
    ])
    return keyboard

def admin_balance_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful admin balance management keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="admin_add_balance")],
        [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_payment_history")],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="admin_panel")]
    ])
    return keyboard

def admin_promocodes_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful admin promocodes management keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï " + t('create_promocode', lang), callback_data="create_promocode")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="list_promocodes")],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="admin_panel")]
    ])
    return keyboard

def confirmation_keyboard(confirm_callback: str, cancel_callback: str, lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful confirmation keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=confirm_callback),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=cancel_callback)
        ]
    ])
    return keyboard

def pagination_keyboard(page: int, total_pages: int, prefix: str, lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful pagination keyboard"""
    buttons = []
    
    if total_pages > 1:
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}_page_{page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(text=f"üìÑ {page}/{total_pages}", callback_data="noop"))
        
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"{prefix}_page_{page+1}"))
        
        buttons.append(nav_buttons)
    
    buttons.append([InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def admin_subscriptions_list_keyboard(subs: List[Subscription], lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful keyboard for admin subscriptions list with enhanced controls"""
    buttons = []
    for sub in subs:
        status_emoji = "üü¢" if sub.is_active else "üî¥"
        price = f"{sub.price:.0f}‚ÇΩ"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
        buttons.append([
            InlineKeyboardButton(
                text=f"{status_emoji} {sub.name} ‚Äî {price}",
                callback_data=f"list_sub_{sub.id}"
            )
        ])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        control_buttons = [
            InlineKeyboardButton(text="‚úèÔ∏è", callback_data=f"edit_sub_{sub.id}"),
            InlineKeyboardButton(
                text="üü¢" if not sub.is_active else "üî¥",
                callback_data=f"toggle_sub_{sub.id}"
            ),
            InlineKeyboardButton(text="üóë", callback_data=f"delete_sub_{sub.id}")
        ]
        
        buttons.append(control_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    buttons.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="create_subscription")])
    buttons.append([InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="admin_subscriptions")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def admin_payment_keyboard(payment_id: int, lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful keyboard for admin payment approval"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data=f"approve_payment_{payment_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_payment_{payment_id}")
        ]
    ])
    return keyboard

def admin_messages_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful admin messages management keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ " + t('send_to_user', lang), callback_data="admin_send_to_user")],
        [InlineKeyboardButton(text="üì¢ " + t('send_to_all', lang), callback_data="admin_send_to_all")],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="admin_panel")]
    ])
    return keyboard

def quick_topup_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Quick topup amounts keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí≥ 100‚ÇΩ", callback_data="quick_topup_100"),
            InlineKeyboardButton(text="üí≥ 300‚ÇΩ", callback_data="quick_topup_300")
        ],
        [
            InlineKeyboardButton(text="üí≥ 500‚ÇΩ", callback_data="quick_topup_500"),
            InlineKeyboardButton(text="üí≥ 1000‚ÇΩ", callback_data="quick_topup_1000")
        ],
        [InlineKeyboardButton(text="üí∞ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="topup_support")],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="balance")]
    ])
    return keyboard

def connection_keyboard(subscription_url: str, lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful connection keyboard with web app"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", url=subscription_url)],
        [InlineKeyboardButton(text="üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="connection_guide")],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="my_subscriptions")]
    ])
    return keyboard

def trial_subscription_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Trial subscription confirmation keyboard"""
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É", callback_data="confirm_trial")],
        [InlineKeyboardButton(text=t('back', lang), callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def admin_monitor_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful admin monitor management keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞", callback_data="monitor_status")],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data="monitor_force_check")],
        [InlineKeyboardButton(text="‚ö∞Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ", callback_data="monitor_deactivate_expired")],
        [InlineKeyboardButton(text="üë§ –¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="monitor_test_user")],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="admin_panel")]
    ])
    return keyboard

def admin_system_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Beautiful admin system management keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="system_stats")],
        [InlineKeyboardButton(text="üñ• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–¥–∞–º–∏", callback_data="nodes_management")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã", callback_data="system_users")],
        [InlineKeyboardButton(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å RemnaWave", callback_data="sync_remnawave")],
        [InlineKeyboardButton(text="üîç –û—Ç–ª–∞–¥–∫–∞ API", callback_data="debug_api_comprehensive")],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="admin_panel")]
    ])
    return keyboard

def system_stats_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """System statistics keyboard with refresh"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="refresh_system_stats")],
        [InlineKeyboardButton(text="üñ• –ù–æ–¥—ã", callback_data="nodes_management")],
        [InlineKeyboardButton(text="üë• –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="system_users")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_system")]
    ])
    return keyboard

def nodes_management_keyboard(nodes: List[Dict], lang: str = 'ru', timestamp: int = None) -> InlineKeyboardMarkup:
    """Improved nodes management keyboard"""
    buttons = []
    
    if nodes:
        # Statistics row
        online_count = len([n for n in nodes if n.get('status') == 'online'])
        total_count = len(nodes)
        
        buttons.append([
            InlineKeyboardButton(
                text=f"üìä –ù–æ–¥—ã: {online_count}/{total_count} –æ–Ω–ª–∞–π–Ω",
                callback_data="noop"
            )
        ])
        
        # Show first 5 nodes with improved display
        for i, node in enumerate(nodes[:5]):
            status = node.get('status', 'unknown')
            
            # Status emoji based on actual status
            if status == 'online':
                status_emoji = "üü¢"
            elif status == 'disabled':
                status_emoji = "‚ö´"
            elif status == 'disconnected':
                status_emoji = "üî¥"
            elif status == 'xray_stopped':
                status_emoji = "üü°"
            else:
                status_emoji = "‚ö™"
            
            node_name = node.get('name', f'Node-{i+1}')
            node_id = node.get('id', node.get('uuid'))
            
            # Truncate long names
            if len(node_name) > 20:
                display_name = node_name[:17] + "..."
            else:
                display_name = node_name
            
            # CPU/Memory usage if available
            usage_info = ""
            if node.get('cpuUsage'):
                usage_info += f" CPU:{node['cpuUsage']:.0f}%"
            if node.get('memUsage'):
                usage_info += f" MEM:{node['memUsage']:.0f}%"
            
            buttons.append([
                InlineKeyboardButton(
                    text=f"{status_emoji} {display_name}{usage_info}",
                    callback_data=f"node_details_{node_id}"
                ),
                InlineKeyboardButton(
                    text="üîÑ",
                    callback_data=f"restart_node_{node_id}"
                ),
                InlineKeyboardButton(
                    text="‚öôÔ∏è",
                    callback_data=f"node_settings_{node_id}"
                )
            ])
        
        if len(nodes) > 5:
            buttons.append([
                InlineKeyboardButton(
                    text=f"... –∏ –µ—â–µ {len(nodes) - 5} –Ω–æ–¥",
                    callback_data="show_all_nodes"
                )
            ])
    else:
        buttons.append([
            InlineKeyboardButton(
                text="‚ùå –ù–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                callback_data="noop"
            )
        ])
    
    # Action buttons
    buttons.append([
        InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ", callback_data="restart_all_nodes"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="nodes_statistics")
    ])
    
    # Refresh button
    refresh_callback = f"refresh_nodes_stats_{timestamp}" if timestamp else "refresh_nodes_stats"
    buttons.append([
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=refresh_callback)
    ])
    
    # Back button
    buttons.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_system")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def system_users_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """System users management keyboard - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_statistics")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_all_system_users")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="search_user_uuid")],
        [InlineKeyboardButton(text="üîç –û—Ç–ª–∞–¥–∫–∞ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="debug_users_api")],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="admin_system")]
    ])
    return keyboard

def bulk_operations_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Bulk operations keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data="bulk_reset_traffic")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="bulk_disable_users")],
        [InlineKeyboardButton(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="bulk_enable_users")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="bulk_delete_users")],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="system_users")]
    ])
    return keyboard

def confirm_restart_keyboard(node_id: str = None, lang: str = 'ru') -> InlineKeyboardMarkup:
    """Confirmation keyboard for node restart"""
    action = f"confirm_restart_node_{node_id}" if node_id else "confirm_restart_all_nodes"
    back_action = f"node_details_{node_id}" if node_id else "nodes_management"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data=action),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=back_action)
        ]
    ])
    return keyboard

def admin_referrals_keyboard(lang: str = 'ru') -> InlineKeyboardMarkup:
    """Admin referral management keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="referral_statistics")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤", callback_data="list_referrers")],
        [InlineKeyboardButton(text="üí∞ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç", callback_data="referral_payments")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="referral_settings")],
        [InlineKeyboardButton(text="üîô " + t('back', lang), callback_data="admin_panel")]
    ])
    return keyboard
