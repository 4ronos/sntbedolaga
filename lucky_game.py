import asyncio
from datetime import datetime, timedelta, timezone
import logging
import random
from typing import Optional, List

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import Database, User
from keyboards import back_keyboard
from translations import t
from utils import log_user_action, format_datetime

logger = logging.getLogger(__name__)

class LuckyGameStates(StatesGroup):
    waiting_number_choice = State()

lucky_game_router = Router()


@lucky_game_router.callback_query(F.data == "lucky_game")
async def lucky_game_menu_callback(callback: CallbackQuery, db: Database, **kwargs):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä—ã —É–¥–∞—á–∏"""
    user = kwargs.get('user')
    config = kwargs.get('config')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        reward_amount = getattr(config, 'LUCKY_GAME_REWARD', 50.0)
        numbers_count = getattr(config, 'LUCKY_GAME_NUMBERS', 30)
        winning_numbers = getattr(config, 'LUCKY_GAME_WINNING_COUNT', 3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è
        can_play, next_game_time = await check_can_play_today(db, user.telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        games_played, total_won, win_count = await get_user_game_stats(db, user.telegram_id)
        
        text = "üé∞ **–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é —É–¥–∞—á—É!**\n\n"
        text += "üéØ **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**\n"
        text += f"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {numbers_count}\n"
        text += f"‚Ä¢ –ò–∑ {numbers_count} —á–∏—Å–µ–ª {winning_numbers} - –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ\n"
        text += f"‚Ä¢ –£–≥–∞–¥–∞–ª–∏ - –ø–æ–ª—É—á–∞–µ—Ç–µ {reward_amount:.0f}‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å!\n"
        text += "‚Ä¢ –ò–≥—Ä–∞—Ç—å –º–æ–∂–Ω–æ 1 —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏\n\n"
        
        text += "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        text += f"‚Ä¢ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {games_played}\n"
        text += f"‚Ä¢ –í—ã–∏–≥—Ä—ã—à–µ–π: {win_count}\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {total_won:.0f}‚ÇΩ\n"
        
        if games_played > 0:
            win_rate = (win_count / games_played) * 100
            text += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []
        
        if can_play:
            buttons.append([InlineKeyboardButton(text="üé≤ –ò–≥—Ä–∞—Ç—å!", callback_data="start_lucky_game")])
        else:
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            now = datetime.utcnow()
            time_left = next_game_time - now
            hours_left = int(time_left.total_seconds() // 3600)
            minutes_left = int((time_left.total_seconds() % 3600) // 60)
            
            if hours_left > 0:
                time_text = f"{hours_left}—á {minutes_left}–º"
            else:
                time_text = f"{minutes_left}–º"
                
            buttons.append([InlineKeyboardButton(text=f"‚è∞ –ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ {time_text}", callback_data="noop")])
        
        buttons.extend([
            [InlineKeyboardButton(text="üìà –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä", callback_data="lucky_game_history")],
            [InlineKeyboardButton(text="üîô " + t('back', user.language), callback_data="main_menu")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in lucky game menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã")

@lucky_game_router.callback_query(F.data == "start_lucky_game")
async def start_lucky_game_callback(callback: CallbackQuery, db: Database, state: FSMContext, **kwargs):
    """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É - –ø–æ–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    user = kwargs.get('user')
    config = kwargs.get('config')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–∞—Ç—å
        can_play, next_game_time = await check_can_play_today(db, user.telegram_id)
        
        if not can_play:
            await callback.answer("‚è∞ –í—ã —É–∂–µ –∏–≥—Ä–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        numbers_count = getattr(config, 'LUCKY_GAME_NUMBERS', 30)
        winning_numbers = getattr(config, 'LUCKY_GAME_WINNING_COUNT', 3)
        reward_amount = getattr(config, 'LUCKY_GAME_REWARD', 50.0)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —á–∏—Å–ª–∞ –∑–∞—Ä–∞–Ω–µ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        winning_nums = random.sample(range(1, numbers_count + 1), winning_numbers)
        
        await state.update_data(
            winning_numbers=winning_nums,
            reward_amount=reward_amount,
            numbers_count=numbers_count
        )
        await state.set_state(LuckyGameStates.waiting_number_choice)
        
        text = f"üéØ **–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {numbers_count}**\n\n"
        text += f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {reward_amount:.0f}‚ÇΩ\n"
        text += f"üçÄ –£–¥–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª: {winning_numbers} –∏–∑ {numbers_count}\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —á–∏—Å–ª–∞–º–∏ (5 –≤ —Ä—è–¥)
        buttons = []
        for i in range(0, numbers_count, 5):
            row = []
            for j in range(5):
                if i + j + 1 <= numbers_count:
                    number = i + j + 1
                    row.append(InlineKeyboardButton(
                        text=str(number),
                        callback_data=f"choose_number_{number}"
                    ))
            buttons.append(row)
        
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="lucky_game")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error starting lucky game: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã")

@lucky_game_router.callback_query(F.data.startswith("choose_number_"), StateFilter(LuckyGameStates.waiting_number_choice))
async def choose_number_callback(callback: CallbackQuery, db: Database, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞"""
    user = kwargs.get('user')
    bot = kwargs.get('bot')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        chosen_number = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        winning_numbers = state_data['winning_numbers']
        reward_amount = state_data['reward_amount']
        numbers_count = state_data['numbers_count']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_winner = chosen_number in winning_numbers
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –ë–î
        await save_game_result(db, user.telegram_id, chosen_number, winning_numbers, is_winner, reward_amount if is_winner else 0.0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if is_winner:
            # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            await db.add_balance(user.telegram_id, reward_amount)
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            await db.create_payment(
                user_id=user.telegram_id,
                amount=reward_amount,
                payment_type='lucky_game',
                description=f'–í—ã–∏–≥—Ä—ã—à –≤ –∏–≥—Ä–µ —É–¥–∞—á–∏ (—á–∏—Å–ª–æ {chosen_number})',
                status='completed'
            )
            
            text = "üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–´ –í–´–ò–ì–†–ê–õ–ò!** üéâ\n\n"
            text += f"üéØ –í–∞—à–µ —á–∏—Å–ª–æ: **{chosen_number}**\n"
            text += f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: **{reward_amount:.0f}‚ÇΩ** –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å!\n"
            text += f"üÜï –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: **{user.balance + reward_amount:.0f}‚ÇΩ**\n\n"
        else:
            text = "üòî **–ù–µ –ø–æ–≤–µ–∑–ª–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑...**\n\n"
            text += f"üéØ –í–∞—à–µ —á–∏—Å–ª–æ: **{chosen_number}**\n"
            text += f"üçÄ –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ —á–∏—Å–ª–∞: **{', '.join(map(str, sorted(winning_numbers)))}**\n\n"
            text += "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —á–∏—Å–ª–∞
        winning_nums_str = ', '.join(map(str, sorted(winning_numbers)))
        text += f"\nüé≤ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —É–¥–∞—á–Ω—ã–µ —á–∏—Å–ª–∞: {winning_nums_str}"
        text += f"\n\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞–≤—Ç—Ä–∞!"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìà –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä", callback_data="lucky_game_history")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_user_action(user.telegram_id, "lucky_game_played", 
                       f"Number: {chosen_number}, Winner: {is_winner}, Reward: {reward_amount if is_winner else 0}")
        
    except Exception as e:
        logger.error(f"Error in choose number: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞")
    
    await state.clear()

@lucky_game_router.callback_query(F.data == "lucky_game_history")
async def lucky_game_history_callback(callback: CallbackQuery, db: Database, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = kwargs.get('user')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–≥—Ä
        games = await get_user_game_history(db, user.telegram_id, limit=10)
        
        if not games:
            text = "üìà **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∏–≥—Ä**\n\n"
            text += "üéØ –í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏ –≤ –∏–≥—Ä—É —É–¥–∞—á–∏.\n\n"
            text += "–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"
        else:
            text = "üìà **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∏–≥—Ä** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n"
            
            for i, game in enumerate(games, 1):
                date_str = format_datetime(game['played_at'], user.language)
                
                if game['is_winner']:
                    emoji = "üéâ"
                    result = f"–í—ã–∏–≥—Ä–∞–ª–∏ {game['reward_amount']:.0f}‚ÇΩ"
                else:
                    emoji = "üòî"
                    result = "–ù–µ –ø–æ–≤–µ–∑–ª–æ"
                
                text += f"{i}. {emoji} –ß–∏—Å–ª–æ: **{game['chosen_number']}** - {result}\n"
                text += f"   üìÖ {date_str}\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ö –∏–≥—Ä–µ", callback_data="lucky_game")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error showing game history: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")

@lucky_game_router.callback_query(F.data == "noop")
async def noop_callback(callback: CallbackQuery, **kwargs):
    """–ü—É—Å—Ç–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async def check_can_play_today(db: Database, user_id: int) -> tuple[bool, Optional[datetime]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è"""
    try:
        can_play = await db.can_play_lucky_game_today(user_id)
        
        if not can_play:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã (–∑–∞–≤—Ç—Ä–∞ –≤ 00:00)
            now = datetime.utcnow()
            tomorrow = now.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
            return False, tomorrow
        
        return True, None
        
    except Exception as e:
        logger.error(f"Error checking can play today: {e}")
        return True, None

async def get_user_game_stats(db: Database, user_id: int) -> tuple[int, float, int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        stats = await db.get_user_game_stats(user_id)
        return stats['total_games'], stats['total_won'], stats['total_wins']
        
    except Exception as e:
        logger.error(f"Error getting user game stats: {e}")
        return 0, 0.0, 0

async def save_game_result(db: Database, user_id: int, chosen_number: int, 
                          winning_numbers: List[int], is_winner: bool, reward_amount: float):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        game = await db.create_lucky_game(
            user_id=user_id,
            chosen_number=chosen_number,
            winning_numbers=winning_numbers,
            is_winner=is_winner,
            reward_amount=reward_amount
        )
        
        if game:
            logger.info(f"Game result saved for user {user_id}: number={chosen_number}, winner={is_winner}, reward={reward_amount}")
        else:
            logger.error(f"Failed to save game result for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error saving game result: {e}")

async def get_user_game_history(db: Database, user_id: int, limit: int = 10) -> List[dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        return await db.get_user_game_history(user_id, limit)
        
    except Exception as e:
        logger.error(f"Error getting user game history: {e}")
        return []
