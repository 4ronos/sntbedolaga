from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime
import logging
from typing import Dict

from database import Database, User
from keyboards import stars_topup_keyboard, stars_payment_keyboard, balance_keyboard
from translations import t
from utils import log_user_action
from referral_utils import process_referral_rewards

logger = logging.getLogger(__name__)

stars_router = Router()

@stars_router.callback_query(F.data == "topup_stars")
async def topup_stars_callback(callback: CallbackQuery, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–≤–µ–∑–¥—ã"""
    user = kwargs.get('user')
    config = kwargs.get('config')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    if not config or not config.STARS_ENABLED:
        await callback.message.edit_text(
            "‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Stars –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            reply_markup=balance_keyboard(user.language)
        )
        return
    
    if not config.STARS_RATES:
        await callback.message.edit_text(
            "‚ùå –ö—É—Ä—Å—ã –∑–≤–µ–∑–¥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
            reply_markup=balance_keyboard(user.language)
        )
        return
    
    text = "‚≠ê **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Stars**\n\n"
    text += "üöÄ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n"
    text += "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ\n"
    text += "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Telegram\n"
    text += "‚Ä¢ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–π –∏ —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
    
    text += "üíé **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:**\n"
    
    sorted_rates = sorted(config.STARS_RATES.items())
    for stars, rubles in sorted_rates:
        rate_per_star = rubles / stars
        
        if stars >= 500:
            bonus_text = " üî• –í—ã–≥–æ–¥–Ω–æ!"
        elif stars >= 250:
            bonus_text = " üíé –•–æ—Ä–æ—à–æ!"
        else:
            bonus_text = ""
        
        text += f"‚Ä¢ {stars} ‚≠ê ‚Üí {rubles:.0f}‚ÇΩ{bonus_text}\n"
    
    text += f"\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"
    
    await callback.message.edit_text(
        text,
        reply_markup=stars_topup_keyboard(config.STARS_RATES, user.language),
        parse_mode='Markdown'
    )

@stars_router.callback_query(F.data.startswith("buy_stars_"))
async def buy_stars_callback(callback: CallbackQuery, db: Database, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥"""
    user = kwargs.get('user')
    config = kwargs.get('config')
    bot = kwargs.get('bot')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    if not config or not config.STARS_ENABLED or not config.STARS_RATES:
        await callback.answer("‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        return
    
    try:
        stars_amount = int(callback.data.split("_")[2])
        
        if stars_amount not in config.STARS_RATES:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥")
            return
        
        rub_amount = config.STARS_RATES[stars_amount]
        
        star_payment = await db.create_star_payment(
            user_id=user.telegram_id,
            stars_amount=stars_amount,
            rub_amount=rub_amount
        )
        
        prices = [LabeledPrice(label=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {rub_amount:.0f}‚ÇΩ", amount=stars_amount)]
        
        try:
            await callback.answer("üí≥ –°–æ–∑–¥–∞—é –ø–ª–∞—Ç–µ–∂...")
            
            await bot.send_invoice(
                chat_id=callback.message.chat.id,
                title=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {rub_amount:.0f}‚ÇΩ –∑–∞ {stars_amount} ‚≠ê",
                payload=f"star_payment_{star_payment.id}",
                currency="XTR",  
                prices=prices
            )
            
            try:
                await callback.message.edit_text(
                    f"üí≥ **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars**\n\n"
                    f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {stars_amount}\n"
                    f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {rub_amount:.0f}‚ÇΩ\n\n"
                    f"üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û–ø–ª–∞—Ç–∏—Ç—å\" –≤ –∏–Ω–≤–æ–π—Å–µ –≤—ã—à–µ\n\n"
                    f"‚ùå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data=f"cancel_star_payment_{star_payment.id}")],
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="topup_stars")]
                    ]),
                    parse_mode='Markdown'
                )
            except TelegramBadRequest:
                await callback.message.answer(
                    f"üí≥ **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars**\n\n"
                    f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {stars_amount}\n"
                    f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {rub_amount:.0f}‚ÇΩ\n\n"
                    f"üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û–ø–ª–∞—Ç–∏—Ç—å\" –≤ –∏–Ω–≤–æ–π—Å–µ –≤—ã—à–µ",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data=f"cancel_star_payment_{star_payment.id}")],
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="topup_stars")]
                    ]),
                    parse_mode='Markdown'
                )
            
        except TelegramBadRequest as e:
            logger.error(f"Failed to send invoice: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            
            try:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=stars_topup_keyboard(config.STARS_RATES, user.language)
                )
            except TelegramBadRequest:
                await callback.message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=stars_topup_keyboard(config.STARS_RATES, user.language)
                )
            
            await db.cancel_star_payment(star_payment.id)
            
    except (ValueError, IndexError) as e:
        logger.error(f"Error processing stars amount: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    except Exception as e:
        logger.error(f"Error in buy_stars_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@stars_router.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery, db: Database, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∑–≤–µ–∑–¥"""
    try:
        if not pre_checkout_query.invoice_payload.startswith("star_payment_"):
            await pre_checkout_query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        payment_id = int(pre_checkout_query.invoice_payload.split("_")[2])
        
        star_payment = await db.get_star_payment_by_id(payment_id)
        
        if not star_payment:
            await pre_checkout_query.answer(ok=False, error_message="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if star_payment.status != 'pending':
            await pre_checkout_query.answer(ok=False, error_message="–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return
        
        if pre_checkout_query.total_amount != star_payment.stars_amount:
            await pre_checkout_query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        await pre_checkout_query.answer(ok=True)
        
    except Exception as e:
        logger.error(f"Error in pre_checkout_query_handler: {e}")
        await pre_checkout_query.answer(ok=False, error_message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")

@stars_router.message(F.successful_payment)
async def successful_payment_handler(message: Message, db: Database, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–≤–µ–∑–¥–∞–º–∏"""
    user = kwargs.get('user')
    bot = kwargs.get('bot')
    
    if not user:
        logger.error("User not found in successful payment handler")
        return
    
    try:
        payment_info = message.successful_payment
        
        if not payment_info.invoice_payload.startswith("star_payment_"):
            logger.error(f"Invalid payment payload: {payment_info.invoice_payload}")
            return
        
        payment_id = int(payment_info.invoice_payload.split("_")[2])
        
        success = await db.complete_star_payment(
            payment_id=payment_id,
            telegram_payment_charge_id=payment_info.telegram_payment_charge_id
        )
        
        if success:
            star_payment = await db.get_star_payment_by_id(payment_id)
            
            if star_payment:
                updated_user = await db.get_user_by_telegram_id(user.telegram_id)
                
                success_text = "‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n"
                success_text += f"‚≠ê –û–ø–ª–∞—á–µ–Ω–æ –∑–≤–µ–∑–¥: {star_payment.stars_amount}\n"
                success_text += f"üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: {star_payment.rub_amount:.0f}‚ÇΩ\n"
                success_text += f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {updated_user.balance:.0f}‚ÇΩ\n\n"
                success_text += "üéâ –°—Ä–µ–¥—Å—Ç–≤–∞ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ!"
                
                await message.answer(
                    success_text,
                    parse_mode='Markdown'
                )
                
                if bot:
                    try:
                        regular_payment = await db.create_payment(
                            user_id=user.telegram_id,
                            amount=star_payment.rub_amount,
                            payment_type='stars',
                            description=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Stars ({star_payment.stars_amount} ‚≠ê)',
                            status='completed'
                        )
                        
                        await process_referral_rewards(
                            user.telegram_id,
                            star_payment.rub_amount,
                            regular_payment.id,
                            db,
                            bot,
                            payment_type='stars'
                        )
                    except Exception as ref_error:
                        logger.error(f"Error processing referral rewards for stars payment: {ref_error}")
                
                log_user_action(user.telegram_id, "stars_payment_completed", 
                               f"Stars: {star_payment.stars_amount}, Amount: {star_payment.rub_amount}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            logger.error(f"Failed to complete star payment {payment_id}")
            
    except Exception as e:
        logger.error(f"Error in successful_payment_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

def get_stars_rate_info(stars_rates: Dict[int, float], lang: str = 'ru') -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö –∑–≤–µ–∑–¥"""
    if not stars_rates:
        return "–ö—É—Ä—Å—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    
    text = "‚≠ê **–ö—É—Ä—Å—ã Telegram Stars:**\n\n"
    
    sorted_rates = sorted(stars_rates.items())
    for stars, rubles in sorted_rates:
        rate_per_star = rubles / stars
        text += f"‚Ä¢ {stars} ‚≠ê = {rubles:.0f}‚ÇΩ (–∫—É—Ä—Å: {rate_per_star:.2f}‚ÇΩ –∑–∞ ‚≠ê)\n"
    
    return text

@stars_router.callback_query(F.data.startswith("cancel_star_payment_"))
async def cancel_star_payment_callback(callback: CallbackQuery, db: Database, **kwargs):
    user = kwargs.get('user')
    config = kwargs.get('config')
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        payment_id = int(callback.data.split("_")[-1])
        
        star_payment = await db.get_star_payment_by_id(payment_id)
        
        if not star_payment:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if star_payment.user_id != user.telegram_id:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–ª–∞—Ç–µ–∂—É")
            return
        
        if star_payment.status != 'pending':
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return
        
        success = await db.cancel_star_payment(payment_id)
        
        if success:
            await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
            
            if config and config.STARS_RATES:
                try:
                    await callback.message.edit_text(
                        "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω\n\n‚≠ê **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Stars**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                        reply_markup=stars_topup_keyboard(config.STARS_RATES, user.language),
                        parse_mode='Markdown'
                    )
                except TelegramBadRequest:
                    await callback.message.answer(
                        "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω\n\n‚≠ê **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Stars**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                        reply_markup=stars_topup_keyboard(config.STARS_RATES, user.language),
                        parse_mode='Markdown'
                    )
            else:
                try:
                    await callback.message.edit_text(
                        "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω",
                        reply_markup=balance_keyboard(user.language)
                    )
                except TelegramBadRequest:
                    await callback.message.answer(
                        "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω",
                        reply_markup=balance_keyboard(user.language)
                    )
            
            log_user_action(user.telegram_id, "stars_payment_cancelled", f"Payment ID: {payment_id}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞")
            
    except (ValueError, IndexError) as e:
        logger.error(f"Error parsing payment ID from callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    except Exception as e:
        logger.error(f"Error in cancel_star_payment_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
