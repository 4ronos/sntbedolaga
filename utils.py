import logging
import secrets
import string
from datetime import datetime, timedelta
from typing import Tuple, Optional, Dict, Any
from database import Database
from database import ReferralProgram, ReferralEarning

logger = logging.getLogger(__name__)

def is_valid_amount(text: str) -> Tuple[bool, float]:
    try:
        text = text.strip().replace(' ', '').replace(',', '.')
        
        amount = float(text)
        
        if amount <= 0:
            return False, 0.0
        
        if amount > 1000000: 
            return False, 0.0
        
        amount = round(amount, 2)
        
        return True, amount
        
    except (ValueError, TypeError):
        return False, 0.0

def validate_promocode_format(code: str) -> bool:
    if not code:
        return False
    
    code = code.strip().upper()
    
    if len(code) < 3 or len(code) > 20:
        return False
    
    if not code.replace('_', '').isalnum():
        return False
    
    return True

def validate_squad_uuid(uuid: str) -> bool:
    if not uuid or not isinstance(uuid, str):
        return False
    
    uuid = uuid.strip()
    
    if len(uuid) < 8:
        return False
    
    allowed_chars = set('0123456789abcdefABCDEF-')
    if not all(c in allowed_chars for c in uuid):
        return False
    
    return True

def parse_telegram_id(text: str) -> Optional[int]:
    try:
        text = text.strip().replace(' ', '')
        
        if text.startswith('@'):
            text = text[1:]
        
        if text.startswith('id'):
            text = text[2:]
        
        telegram_id = int(text)
        
        if telegram_id <= 0 or telegram_id > 9999999999:
            return None
        
        return telegram_id
        
    except (ValueError, TypeError):
        return None

def generate_username() -> str:
    prefix = "user_"
    random_part = ''.join(secrets.choice(string.ascii_lowercase + string.digits) for _ in range(8))
    return prefix + random_part

def generate_password() -> str:
    return ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(12))

def calculate_expiry_date(days: int) -> str:
    expiry_date = datetime.now() + timedelta(days=days)
    return expiry_date.isoformat() + 'Z'

def format_datetime(dt: datetime, language: str = 'ru') -> str:
    if not dt:
        return "N/A"
    
    if language == 'ru':
        return dt.strftime('%d.%m.%Y %H:%M')
    else:
        return dt.strftime('%Y-%m-%d %H:%M')

def format_date(dt: datetime, language: str = 'ru') -> str:
    if not dt:
        return "N/A"
    
    if language == 'ru':
        return dt.strftime('%d.%m.%Y')
    else:
        return dt.strftime('%Y-%m-%d')

def format_bytes(bytes_value: int) -> str:
    if bytes_value == 0:
        return "0 B"
    
    units = ['B', 'KB', 'MB', 'GB', 'TB']
    unit_index = 0
    value = float(bytes_value)
    
    while value >= 1024 and unit_index < len(units) - 1:
        value /= 1024
        unit_index += 1
    
    if value >= 100:
        return f"{value:.0f} {units[unit_index]}"
    elif value >= 10:
        return f"{value:.1f} {units[unit_index]}"
    else:
        return f"{value:.2f} {units[unit_index]}"

def format_payment_status(status: str, language: str = 'ru') -> str:
    status_map = {
        'ru': {
            'pending': '–û–∂–∏–¥–∞–µ—Ç',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω', 
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
            'failed': '–û—à–∏–±–∫–∞'
        },
        'en': {
            'pending': 'Pending',
            'completed': 'Completed',
            'cancelled': 'Cancelled',
            'failed': 'Failed'
        }
    }
    
    return status_map.get(language, status_map['ru']).get(status, status)

def format_subscription_info(subscription: Dict[str, Any], language: str = 'ru') -> str:
    text = ""
    
    if language == 'ru':
        text += f"üìã **–ü–æ–¥–ø–∏—Å–∫–∞: {subscription['name']}**\n\n"
        text += f"üí∞ –¶–µ–Ω–∞: {subscription['price']} —Ä—É–±.\n"
        text += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {subscription['duration_days']} –¥–Ω.\n"
        
        if subscription['traffic_limit_gb'] > 0:
            text += f"üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {subscription['traffic_limit_gb']} –ì–ë\n"
        else:
            text += f"üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: –ë–µ–∑–ª–∏–º–∏—Ç\n"
        
        if subscription.get('description'):
            text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{subscription['description']}"
    else:
        text += f"üìã **Subscription: {subscription['name']}**\n\n"
        text += f"üí∞ Price: ${subscription['price']}\n"
        text += f"‚è± Duration: {subscription['duration_days']} days\n"
        
        if subscription['traffic_limit_gb'] > 0:
            text += f"üìä Traffic limit: {subscription['traffic_limit_gb']} GB\n"
        else:
            text += f"üìä Traffic limit: Unlimited\n"
        
        if subscription.get('description'):
            text += f"\nüìù Description:\n{subscription['description']}"
    
    return text

def format_user_subscription_info(user_sub: Dict[str, Any], subscription: Dict[str, Any], 
                                expires_at: datetime, language: str = 'ru') -> str:
    text = ""
    
    if language == 'ru':
        text += f"üìã **{subscription['name']}**\n\n"
        
        now = datetime.utcnow()
        if expires_at < now:
            status = "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
            days_left = 0
        elif not user_sub.get('is_active', True):
            status = "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            days_left = (expires_at - now).days
        else:
            days_left = (expires_at - now).days
            status = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
        
        text += f"üîò –°—Ç–∞—Ç—É—Å: {status}\n"
        text += f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {format_datetime(expires_at, language)}\n"
        
        if days_left > 0:
            text += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω.\n"
        
        if subscription['traffic_limit_gb'] > 0:
            text += f"üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {subscription['traffic_limit_gb']} –ì–ë\n"
        else:
            text += f"üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: –ë–µ–∑–ª–∏–º–∏—Ç\n"
        
        if subscription.get('name') == "–°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞" or (subscription.get('description') and '–∏–º–ø–æ—Ä—Ç' in subscription.get('description', '').lower()):
            text += f"\nüîÑ –¢–∏–ø: –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
            text += f"‚ÑπÔ∏è –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        
        if subscription.get('description') and not ('–∏–º–ø–æ—Ä—Ç' in subscription.get('description', '').lower()):
            text += f"\nüìù {subscription['description']}"
    else:
        text += f"üìã **{subscription['name']}**\n\n"
        
        now = datetime.utcnow()
        if expires_at < now:
            status = "‚ùå Expired"
            days_left = 0
        elif not user_sub.get('is_active', True):
            status = "‚è∏ Suspended"
            days_left = (expires_at - now).days
        else:
            days_left = (expires_at - now).days
            status = f"‚úÖ Active"
        
        text += f"üîò Status: {status}\n"
        text += f"üìÖ Expires: {format_datetime(expires_at, language)}\n"
        
        if days_left > 0:
            text += f"‚è∞ Days left: {days_left}\n"
        
        if subscription['traffic_limit_gb'] > 0:
            text += f"üìä Traffic limit: {subscription['traffic_limit_gb']} GB\n"
        else:
            text += f"üìä Traffic limit: Unlimited\n"
        
        if subscription.get('name') == "–°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞" or (subscription.get('description') and 'import' in subscription.get('description', '').lower()):
            text += f"\nüîÑ Type: Imported from old system\n"
            text += f"‚ÑπÔ∏è Extension not available"
        
        if subscription.get('description') and not ('import' in subscription.get('description', '').lower()):
            text += f"\nüìù {subscription['description']}"
    
    return text

def log_user_action(user_id: int, action: str, details: str = ""):
    logger.info(f"USER_ACTION: {user_id} - {action}" + (f" - {details}" if details else ""))

async def process_referral_rewards(user_id: int, amount: float, payment_id: int, db: Database, bot=None):
    try:
        import os
        
        threshold = float(os.getenv('REFERRAL_THRESHOLD', '300.0'))
        first_reward = float(os.getenv('REFERRAL_FIRST_REWARD', '150.0'))
        referred_bonus = float(os.getenv('REFERRAL_REFERRED_BONUS', '150.0'))
        percentage = float(os.getenv('REFERRAL_PERCENTAGE', '0.25'))
        
        referral = await db.get_referral_by_referred_id(user_id)
        
        if not referral:
            logger.debug(f"No referral found for user {user_id}")
            return
        
        user = await db.get_user_by_telegram_id(user_id)
        if not user:
            logger.error(f"User {user_id} not found")
            return
        
        logger.info(f"Processing referral rewards for user {user_id}, amount {amount}, referrer {referral.referrer_id}")
        
        if not referral.first_reward_paid and user.balance >= threshold:
            logger.info(f"Processing first reward for referral {referral.id} (threshold: {threshold}, reward: {first_reward})")
            
            await db.add_balance(referral.referrer_id, first_reward)
            
            await db.create_payment(
                user_id=referral.referrer_id,
                amount=first_reward,
                payment_type='referral',
                description=f'–ü–µ—Ä–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ID:{user_id}',
                status='completed'
            )
            
            success = await db.create_referral_earning(
                referrer_id=referral.referrer_id,
                referred_id=user_id,
                amount=first_reward,
                earning_type='first_reward',
                related_payment_id=payment_id
            )
            
            if success:
                logger.info(f"First reward paid: {first_reward}‚ÇΩ to referrer {referral.referrer_id}")
                
                if bot:
                    try:
                        await bot.send_message(
                            referral.referrer_id,
                            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {threshold}‚ÇΩ+\n\n"
                            f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {first_reward}‚ÇΩ –∑–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!\n"
                            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å {percentage*100:.0f}% —Å –∫–∞–∂–¥–æ–≥–æ –µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞."
                        )
                        
                        await bot.send_message(
                            user_id,
                            f"üéÅ –ë–æ–Ω—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {referred_bonus}‚ÇΩ –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
                        )
                        
                        await db.add_balance(user_id, referred_bonus)
                        await db.create_payment(
                            user_id=user_id,
                            amount=referred_bonus,
                            payment_type='referral',
                            description='–ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ',
                            status='completed'
                        )
                        
                        logger.info(f"Referral bonus notifications sent and balance updated")
                        
                    except Exception as e:
                        logger.error(f"Failed to send referral notifications: {e}")
            else:
                logger.error(f"Failed to create first reward earning")
        
        if amount > 0 and referral.first_reward_paid:  
            percentage_reward = amount * percentage
            
            if percentage_reward >= 0.01:
                await db.add_balance(referral.referrer_id, percentage_reward)
                
                await db.create_payment(
                    user_id=referral.referrer_id,
                    amount=percentage_reward,
                    payment_type='referral',
                    description=f'{percentage*100:.0f}% –¥–æ—Ö–æ–¥–∞ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ID:{user_id}',
                    status='completed'
                )
                
                success = await db.create_referral_earning(
                    referrer_id=referral.referrer_id,
                    referred_id=user_id,
                    amount=percentage_reward,
                    earning_type='percentage',
                    related_payment_id=payment_id
                )
                
                if success:
                    logger.info(f"Percentage reward paid: {percentage_reward:.2f}‚ÇΩ ({percentage*100:.0f}%) to referrer {referral.referrer_id}")
                    
                    if bot and percentage_reward >= 1.0:
                        try:
                            await bot.send_message(
                                referral.referrer_id,
                                f"üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥!\n\n"
                                f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–ª–∞—Ç–µ–∂ –Ω–∞ {amount:.2f}‚ÇΩ\n"
                                f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {percentage_reward:.2f}‚ÇΩ ({percentage*100:.0f}%)"
                            )
                        except Exception as e:
                            logger.error(f"Failed to send percentage notification: {e}")
                else:
                    logger.error(f"Failed to create percentage earning")
        elif amount > 0 and not referral.first_reward_paid:
            logger.info(f"Skipping percentage reward for user {user_id} - first reward not yet paid")
    
    except Exception as e:
        logger.error(f"Error processing referral rewards: {e}")

async def create_referral_from_start_param(user_telegram_id: int, start_param: str, db: Database, bot=None):
    try:
        if not start_param.startswith("ref_"):
            return False
        
        referrer_id = int(start_param.replace("ref_", ""))
        
        if referrer_id == user_telegram_id:
            logger.warning(f"User {user_telegram_id} tried to refer themselves")
            return False
        
        existing_referral = await db.get_referral_by_referred_id(user_telegram_id)
        
        if existing_referral:
            logger.info(f"User {user_telegram_id} already has referrer")
            return False
        
        referral_code = await db.generate_unique_referral_code(referrer_id)
        
        referral = await db.create_referral(referrer_id, user_telegram_id, referral_code)
        
        if referral:
            logger.info(f"Created referral: {referrer_id} -> {user_telegram_id} with code {referral_code}")
            
            if bot:
                try:
                    referrer = await db.get_user_by_telegram_id(referrer_id)
                    if referrer:
                        await bot.send_message(
                            referrer_id,
                            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n"
                            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ 150‚ÇΩ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω –ø–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å –Ω–∞ 300‚ÇΩ.\n"
                            f"–ò –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 25% —Å –∫–∞–∂–¥–æ–≥–æ –µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞!"
                        )
                except Exception as e:
                    logger.error(f"Failed to notify referrer: {e}")
            
            return True
        
        return False
        
    except (ValueError, TypeError) as e:
        logger.warning(f"Invalid referral parameter: {start_param}")
        return False
    except Exception as e:
        logger.error(f"Error creating referral from start param: {e}")
        return False

async def create_referral_from_promocode(user_telegram_id: int, referral_code: str, db: Database, bot=None):
    try:
        if not referral_code.startswith("REF"):
            return False
        
        logger.info(f"Trying to use referral code {referral_code} for user {user_telegram_id}")
        
        async with db.session_factory() as session:
            from sqlalchemy import select
            result = await session.execute(
                select(ReferralProgram).where(ReferralProgram.referral_code == referral_code)
            )
            referral_record = result.scalar_one_or_none()
            
            if not referral_record:
                logger.warning(f"No referrer found for code {referral_code}")
                return False
            
            referrer_id = referral_record.referrer_id
            
            if referrer_id == user_telegram_id:
                logger.warning(f"User {user_telegram_id} tried to use own referral code")
                return False
            
            existing_referral = await db.get_referral_by_referred_id(user_telegram_id)
            
            if existing_referral:
                logger.info(f"User {user_telegram_id} already has referrer")
                return False
            
            referral = await db.create_referral(referrer_id, user_telegram_id, referral_code)
            
            if referral:
                logger.info(f"Created referral from promocode: {referrer_id} -> {user_telegram_id}")
                
                if bot:
                    try:
                        await bot.send_message(
                            referrer_id,
                            f"üéâ –ü–æ –≤–∞—à–µ–º—É –ø—Ä–æ–º–æ–∫–æ–¥—É {referral_code} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n"
                            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ 150‚ÇΩ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω –ø–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å –Ω–∞ 300‚ÇΩ."
                        )
                    except Exception as e:
                        logger.error(f"Failed to notify referrer: {e}")
                
                return True
            
            return False
        
    except Exception as e:
        logger.error(f"Error creating referral from promocode: {e}")
        return False

def generate_referral_link(bot_username: str, user_id: int) -> str:
    if not bot_username:
        return ""
    
    if bot_username.startswith('@'):
        bot_username = bot_username[1:]
    
    return f"https://t.me/{bot_username}?start=ref_{user_id}"

def validate_referral_code(code: str) -> bool:
    if not code or not code.startswith("REF"):
        return False
    if len(code) < 4 or len(code) > 20:
        return False
    return True

def format_referral_stats(stats: dict, lang: str = 'ru') -> str:
    if lang == 'ru':
        return (f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {stats['total_referrals']}\n"
                f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_referrals']}\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_earned']:.2f}‚ÇΩ")
    else:
        return (f"üë• Invited: {stats['total_referrals']}\n"
                f"‚úÖ Active: {stats['active_referrals']}\n"
                f"üí∞ Earned: ${stats['total_earned']:.2f}")

def bytes_to_gb(bytes_value: int) -> float:
    if not bytes_value or bytes_value == 0:
        return 0.0
    return round(bytes_value / (1024**3), 2)

def format_memory_usage(used_gb: float, total_gb: float) -> str:
    if total_gb == 0:
        return "N/A"
    
    usage_percent = (used_gb / total_gb) * 100
    available_gb = total_gb - used_gb
    
    return f"{used_gb:.1f}/{total_gb:.1f} –ì–ë ({usage_percent:.1f}%) ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available_gb:.1f} –ì–ë"

def format_uptime(uptime_seconds: float) -> str:
    if uptime_seconds <= 0:
        return "N/A"
    
    uptime_hours = int(uptime_seconds // 3600)
    uptime_days = uptime_hours // 24
    uptime_hours = uptime_hours % 24
    uptime_minutes = int((uptime_seconds % 3600) // 60)
    
    if uptime_days > 0:
        return f"{uptime_days}–¥ {uptime_hours}—á"
    elif uptime_hours > 0:
        return f"{uptime_hours}—á {uptime_minutes}–º"
    else:
        return f"{uptime_minutes}–º"
